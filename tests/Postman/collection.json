{
  "info": {
    "_postman_id": "de41bff7-ab7d-43d3-b387-4eac3e580002",
    "name": "SW6 CI Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Init",
      "item": [
        {
          "name": "SW: get sales channel",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Get Main Sales Channel data\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data[0].attributes.name).to.be.eq('Storefront');\r",
                  "    pm.environment.set(\"gen_salesChannel_id\", jsonData.data[0].id);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Storefront\"\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/search/sales-channel",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "search",
                "sales-channel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SW: get shopgate plugin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Get values\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.environment.set(\"gen_plugin_version\", jsonData.data[0].attributes.version);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"composerName\",\r\n          \"value\": \"shopgate/cart-integration-shopware6\"\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/search/plugin",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "search",
                "plugin"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SW: get all categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "const jsonData = pm.response.json();\r",
                  "pm.environment.set(\"gen_category_count\", jsonData.total);\r",
                  "\r",
                  "pm.test(\"Test finding home category by name: \" + pm.environment.get('category_main_name'), function () {\r",
                  "    pm.expect(jsonData.total).to.eq(8);\r",
                  "    jsonData.data.forEach(function(category, index) {\r",
                  "           pm.environment.set(`gen_category_uid_${index}`, category);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"{{category_main_name}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/search-ids/category",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "search-ids",
                "category"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SW: get customer group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "const jsonData = pm.response.json();\r",
                  "pm.test(\"Test getting main customer group\", function () {\r",
                  "    pm.expect(jsonData.total).to.eq(1);\r",
                  "    pm.environment.set(`gen_customer_group_main_id`, jsonData.data[0]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"2fbb5fe2e29a4d70aa5854ce7ce3e20b\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/search-ids/customer-group",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "search-ids",
                "customer-group"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SW: get non default lang ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "const jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Test finding non-default lang: \", function () {\r",
                  "    pm.expect(jsonData.total).to.eq(1);\r",
                  "    pm.environment.set(`gen_non_default_lang`, jsonData.data[0]);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"2fbb5fe2e29a4d70aa5854ce7ce3e20b\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/search-ids/language",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "search-ids",
                "language"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SW: find Headless channel",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Get values\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data[0].attributes.name).to.be.eq('Headless');\r",
                  "    pm.environment.set(\"gen_channel_headless_id\", jsonData.data[0].id);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Headless\"\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/search/sales-channel",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "search",
                "sales-channel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SW: change channel lang",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successfully changed Headless channel language\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "accept": true
            }
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"languageId\": \"{{gen_non_default_lang}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/sales-channel/{{gen_channel_headless_id}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "sales-channel",
                "{{gen_channel_headless_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get address country",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Get country ISO\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data).be.an('array').to.be.not.empty\r",
                  "    pm.expect(jsonData.data[0]).to.haveOwnProperty('attributes').to.haveOwnProperty('iso');\r",
                  "    pm.environment.set(\"gen_customer_default_country_iso\", jsonData.data[0].attributes.iso);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/api/customer-address/{{customer_default_address_id}}/country",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "customer-address",
                "{{customer_default_address_id}}",
                "country"
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const createRequest = {",
              "            \"client_id\": pm.environment.get(\"sw_client_id\"),",
              "            \"grant_type\": \"password\",",
              "            \"scopes\": \"write\",",
              "            \"username\": pm.environment.get(\"sw_admin\"),",
              "            \"password\": pm.environment.get(\"sw_pass\")",
              "        };",
              "const refreshRequest = {",
              "    \"grant_type\": \"refresh_token\",",
              "    \"client_id\": pm.environment.get(\"sw_client_id\"),",
              "    \"refresh_token\": pm.environment.get(\"gen_refresh_token\")",
              "};",
              "// SW Auth",
              "const authRequest = {",
              "  url: pm.environment.replaceIn(pm.globals.get(\"sw_endpoint_auth\")),",
              "  method: 'POST',",
              "  header: 'Accept: application/json\\nContent-Type: application/json; charset=utf-8',",
              "  body: {",
              "    mode: 'application/json'",
              "  }",
              "};",
              "",
              "",
              "var getToken = true;",
              "",
              "if (!pm.environment.get('gen_token_expires') || ",
              "    !pm.environment.get('gen_access_token')) {",
              "    console.log('Token or expiry date are missing')",
              "} else if (pm.environment.get('gen_token_expires') <= (new Date()).getTime()) {",
              "    console.log('Token is expired')",
              "} else {",
              "    getToken = false;",
              "    console.log('Token and expiry date are all good');",
              "}",
              "",
              "if (getToken === true) {",
              "    // set body depending on type of request needed",
              "    authRequest.body.raw = JSON.stringify(pm.environment.get(\"gen_refresh_token\") ? refreshRequest : createRequest);",
              "    pm.sendRequest(authRequest, function (err, res) {",
              "    console.log(err ? err : res.json());",
              "        if (err === null) {",
              "            console.log('Saving the token and expiry date')",
              "            var responseJson = res.json();",
              "            pm.environment.set('gen_access_token', responseJson.access_token)",
              "           ",
              "            var expiryDate = new Date();",
              "            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
              "            pm.environment.set('gen_token_expires', expiryDate.getTime());",
              "            pm.environment.set('gen_refresh_token', responseJson.refresh_token);",
              "        }",
              "    });",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "General Errors",
      "item": [
        {
          "name": "SG: incorrect login error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error_text).to.eq('authentication failed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}",
                "disabled": true
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_ping}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Export",
      "item": [
        {
          "name": "Category",
          "item": [
            {
              "name": "SG: get specific",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"Have proper category data\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "    if (pm.globals.get('verbose')){",
                      "        console.log(jsonObject);",
                      "    }",
                      "    pm.expect(jsonObject.categories.category).to.have.property('$');",
                      "    pm.expect(jsonObject.categories.category.$.uid, 'UUID not found').to.be.a('string').to.be.eq(pm.environment.get(\"gen_category_uid_0\"));",
                      "    pm.expect(jsonObject.categories.category.$.sort_order).to.be.a('string').to.match(/^\\d+$/).to.eq('3');",
                      "    pm.expect(jsonObject.categories.category.$.is_active).to.be.eq('0');",
                      "    pm.expect(jsonObject.categories.category.$.is_anchor).to.be.eq('1');",
                      "    pm.expect(jsonObject.categories.category, 'Name not set').to.have.property('name').to.be.a('string').to.be.not.empty;",
                      "    pm.expect(jsonObject.categories.category, 'Deeplink not set').to.have.property('deeplink').to.be.a('string').to.be.empty;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_categories}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[0]",
                      "value": "{{gen_category_uid_0}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: get specific  2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"Have proper category data\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "    if (pm.globals.get('verbose')){",
                      "        console.log(jsonObject);",
                      "    }",
                      "    pm.expect(jsonObject.categories.category).to.have.property('$');",
                      "    pm.expect(jsonObject.categories.category.$.uid, 'UUID not found').to.be.a('string').to.be.eq(pm.environment.get(\"gen_category_uid_1\"));",
                      "    pm.expect(jsonObject.categories.category.$.sort_order).to.be.a('string').to.match(/^\\d+$/).to.eq('3');",
                      "    pm.expect(jsonObject.categories.category.$.is_active).to.be.eq('1');",
                      "    pm.expect(jsonObject.categories.category.$.is_anchor).to.be.eq('1');",
                      "    pm.expect(jsonObject.categories.category.$.parent_uid).to.be.eq('77b959cf66de4c1590c7f9b7da3982f3');",
                      "    pm.expect(jsonObject.categories.category, 'Name not set').to.have.property('name').to.be.a('string').to.be.eq('Bakery products');",
                      "    pm.expect(jsonObject.categories.category, 'Deeplink not set').to.have.property('deeplink').to.be.a('string').to.be.eq(pm.environment.get(\"host\") + '/Food/Bakery-products/');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_categories}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[0]",
                      "value": "{{gen_category_uid_1}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: get first 5",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"have categories\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "    if (pm.globals.get('verbose')) {",
                      "        console.log(jsonObject.categories.category[0]);",
                      "    }",
                      "",
                      "    pm.expect(jsonObject.categories.category).length(5);",
                      "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_0\")), 'Missing 0').to.be.not.undefined;",
                      "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_1\")), 'Missing 1').to.be.not.undefined;",
                      "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_2\")), 'Missing 2').to.be.not.undefined;",
                      "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_3\")), 'Missing 3').to.be.not.undefined;",
                      "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_4\")), 'Missing 4').to.be.not.undefined;",
                      "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_5\")), 'Have 5?').to.be.undefined;",
                      "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_6\")), 'Have 6?').to.be.undefined;",
                      "});",
                      "",
                      "/**",
                      " * @param {array} list",
                      " * @param {string} id",
                      " */",
                      "function findById(list, id) {",
                      "    return list.find(element => element.$.uid === id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_categories}}",
                      "type": "text"
                    },
                    {
                      "key": "limit",
                      "value": "5",
                      "type": "text"
                    },
                    {
                      "key": "offset",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "uids[0]",
                      "value": "{{gen_category_uid_0}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[1]",
                      "value": "{{gen_category_uid_1}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[2]",
                      "value": "{{gen_category_uid_2}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[3]",
                      "value": "{{gen_category_uid_3}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[4]",
                      "value": "{{gen_category_uid_4}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[5]",
                      "value": "{{gen_category_uid_5}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[6]",
                      "value": "{{gen_category_uid_6}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: get last 5",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"have categories\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "",
                      "    if (pm.globals.get('verbose')) {",
                      "        console.log(jsonObject.categories.category[0]);",
                      "    }",
                      "    pm.expect(jsonObject.categories.category).length(2);",
                      "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_5\")), '5 should be undefined').to.be.not.undefined;",
                      "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_6\")), '6 should be undefined').to.be.not.undefined;",
                      "});",
                      "",
                      "/**",
                      " * @param {array} list",
                      " * @param {string} id",
                      " */",
                      "function findById(list, id) {",
                      "    return list.find(element => element.$.uid === id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_categories}}",
                      "type": "text"
                    },
                    {
                      "key": "limit",
                      "value": "5",
                      "type": "text"
                    },
                    {
                      "key": "offset",
                      "value": "2",
                      "type": "text"
                    },
                    {
                      "key": "uids[0]",
                      "value": "{{gen_category_uid_0}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[1]",
                      "value": "{{gen_category_uid_1}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[2]",
                      "value": "{{gen_category_uid_2}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[3]",
                      "value": "{{gen_category_uid_3}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[4]",
                      "value": "{{gen_category_uid_4}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[5]",
                      "value": "{{gen_category_uid_5}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[6]",
                      "value": "{{gen_category_uid_6}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: unlimited",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"Check list of categories\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "",
                      "    if (pm.globals.get('verbose')) {",
                      "        console.log(jsonObject.categories.category[0]);",
                      "    }",
                      "",
                      "    pm.expect(jsonObject.categories.category).length(pm.environment.get('gen_category_count'), 'Should be one less because root category is not exported in SG');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_categories}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Product",
          "item": [
            {
              "name": "SG: get all products",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"Has All items\", function () {",
                      "    var jsonObject = xml2Json(responseBody);",
                      "    pm.expect(Object.keys(jsonObject.items.item).length).to.eq(5);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_items}}",
                      "type": "text"
                    },
                    {
                      "key": "limit",
                      "value": "100",
                      "description": "\n",
                      "type": "text"
                    },
                    {
                      "key": "offset",
                      "value": "0",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Settings",
          "item": [
            {
              "name": "SG: get_settings (EN)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"No error\", function () {",
                      "    if (jsonData.error > 0) {",
                      "        console.log(jsonData.error_text);",
                      "    }",
                      "    pm.expect(jsonData.error, 'SDK Error').to.eql(0);",
                      "});",
                      "",
                      "pm.test(\"Value checks\", function () {",
                      "     if (pm.globals.get('verbose')) {",
                      "        console.log(jsonData.customer_groups);",
                      "    }",
                      "    pm.expect(jsonData.customer_groups).to.be.a('array').to.be.length(1);",
                      "    pm.expect(jsonData.customer_groups[0]).to.haveOwnProperty('id').to.eq(pm.environment.get('gen_customer_group_main_id'));",
                      "    pm.expect(jsonData.customer_groups[0]).to.haveOwnProperty('name').to.eq('Standard customer group');",
                      "    pm.expect(jsonData.customer_groups[0]).to.haveOwnProperty('is_default').to.eq('1');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_settings}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: get_settings (DE)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"No error\", function () {",
                      "    pm.expect(jsonData.error).to.eql(0);",
                      "});",
                      "",
                      "pm.test(\"Value checks\", function () {",
                      "     if (pm.globals.get('verbose')) {",
                      "        console.log(jsonData.customer_groups);",
                      "    }",
                      "    pm.expect(jsonData.customer_groups).to.be.a('array').to.be.length(1);",
                      "    pm.expect(jsonData.customer_groups[0]).to.haveOwnProperty('id').to.eq(pm.environment.get('gen_customer_group_main_id'));",
                      "    pm.expect(jsonData.customer_groups[0]).to.haveOwnProperty('name').to.eq('Standard-Kundengruppe');",
                      "    pm.expect(jsonData.customer_groups[0]).to.haveOwnProperty('is_default').to.eq('1');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number_headless}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_settings}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: create customer grp",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created customer group successfully\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"A custom group\",\r\n    \"displayGross\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/customer-group",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "customer-group"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: get_settings (2 grps)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"No error\", function () {",
                      "    pm.expect(jsonData.error).to.eql(0);",
                      "});",
                      "",
                      "pm.test(\"Value checks\", function () {",
                      "    pm.expect(jsonData.customer_groups).to.be.a('array').to.be.length(2);",
                      "    if (pm.globals.get('verbose')) {",
                      "        console.log(jsonData.customer_groups);",
                      "    }",
                      "    const nonDefaultGroup = jsonData.customer_groups.find(group => { return group.name === 'A custom group'});",
                      "    pm.expect(nonDefaultGroup).to.haveOwnProperty('id').to.not.eq(pm.environment.get('gen_customer_group_main_id'));",
                      "    pm.expect(nonDefaultGroup).to.haveOwnProperty('is_default').to.eq('0');",
                      "    pm.environment.set('gen_customer_group_secondary_id', nonDefaultGroup.id);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_settings}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: change customer grp",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successfully changed customer group\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "accept": true
                }
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"groupId\": \"{{gen_customer_group_secondary_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/customer/{{customer_default_id}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "customer",
                    "{{customer_default_id}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Cart",
          "item": [
            {
              "name": "SG: cart customer grp",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Check default customer group set for customer\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    ",
                      "     if (pm.globals.get('verbose')) {",
                      "        console.log(jsonData);",
                      "    }",
                      "",
                      "    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_secondary_id'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "action",
                      "value": "{{framework_action_check_cart}}",
                      "type": "text"
                    },
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_customer_id]",
                      "value": "{{customer_default_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[payment_group]",
                      "value": "COD",
                      "type": "text"
                    },
                    {
                      "key": "cart[payment_method]",
                      "value": "COD",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][gender]",
                      "value": "{{customer_default_gender}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][first_name]",
                      "value": "{{customer_default_firstName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][last_name]",
                      "value": "{{customer_default_lastName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][street_1]",
                      "value": "{{customer_default_street1}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][city]",
                      "value": "{{customer_default_city}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][zipcode]",
                      "value": "{{customer_default_zip}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][country]",
                      "value": "{{gen_customer_default_country_iso}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][gender]",
                      "value": "{{customer_default_gender}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][first_name]",
                      "value": "{{customer_default_firstName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][last_name]",
                      "value": "{{customer_default_lastName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][street_1]",
                      "value": "{{customer_default_street1}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][city]",
                      "value": "{{customer_default_city}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][zipcode]",
                      "value": "{{customer_default_zip}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][country]",
                      "value": "{{gen_customer_default_country_iso}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "SG: ping",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Ping Pong\", function () {",
                  "    pm.expect(jsonData.pong).to.eql('OK');",
                  "});",
                  "",
                  "pm.test('Plugin Versions', function () {",
                  "    pm.expect(jsonData.plugin_version).to.be.a('string').to.be.eq(pm.environment.get(\"gen_plugin_version\"));",
                  "    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
                  "    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
                  "",
                  "    pm.expect(jsonData.configuration.server).to.be.eq('live');",
                  "    pm.expect(jsonData.configuration.api_url).to.be.eq('https://api.shopgate.com/merchant/');",
                  "    pm.expect(jsonData.configuration.enable_set_settings).to.be.eq(1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_ping}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: get_customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Check customer data\", function () {",
                  "    if (pm.globals.get('verbose')) {",
                  "        console.log(jsonData);",
                  "    }",
                  "",
                  "    pm.expect(jsonData.user_data.mail).to.eql(pm.environment.get('userEmail'));",
                  "    pm.expect(jsonData.user_data.gender).to.eql('m');",
                  "    pm.expect(jsonData.user_data.first_name).to.eql('Max');",
                  "    pm.expect(jsonData.user_data.last_name).to.eql('Mustermann');",
                  "    pm.expect(jsonData.user_data.customer_number).to.eql('SWDEMO10000');",
                  "    pm.expect(jsonData.user_data.birthday).to.eql('1996-06-06');",
                  "    pm.expect(jsonData.user_data.customer_groups[0]).to.not.be.empty;",
                  "    pm.expect(jsonData.user_data.customer_groups[0]).to.have.ownProperty('id').to.eq(pm.environment.get('gen_customer_group_secondary_id'));",
                  "    pm.expect(jsonData.user_data.customer_groups[0]).to.have.ownProperty('name').to.eq('A custom group');",
                  "    pm.expect(jsonData.user_data.custom_fields).to.be.an('array').to.be.empty;",
                  "});",
                  "",
                  "pm.test(\"Check billing address data\", function () {",
                  "    const billing = jsonData.addresses.find(element => element.is_invoice_address === 1);",
                  "    pm.expect(billing.is_invoice_address).to.eql(1);",
                  "    pm.expect(billing.is_delivery_address).to.eql(1);",
                  "    pm.expect(billing.country).to.eql(pm.environment.get('gen_customer_default_country_iso'));",
                  "    pm.expect(billing.city).to.eql(pm.environment.get('customer_default_city'));",
                  "    pm.expect(billing.zipcode).to.eql(pm.environment.get('customer_default_zip'));",
                  "    pm.expect(billing.state).to.eql(null);",
                  "    pm.expect(billing.first_name).to.eql(pm.environment.get('customer_default_firstName'));",
                  "    pm.expect(billing.last_name).to.eql(pm.environment.get('customer_default_lastName'));",
                  "    pm.expect(billing.company).to.eql(null);",
                  "    pm.expect(billing.street_2).to.eql(null);",
                  "    pm.expect(billing.phone).to.eql(null);",
                  "    pm.expect(billing.gender).to.eql(pm.environment.get('customer_default_gender'));",
                  "    pm.expect(billing.custom_fields).to.be.an('array').to.be.empty;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_get_customer}}",
                  "type": "text"
                },
                {
                  "key": "user",
                  "value": "{{userEmail}}",
                  "type": "text"
                },
                {
                  "key": "pass",
                  "value": "{{userPass}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Import",
      "item": [
        {
          "name": "SG: register_customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Check customer data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (pm.globals.get('verbose')) {",
                  "        console.log(jsonData);",
                  "    }",
                  "    const firstName = pm.environment.get('temp-first-name');",
                  "    const lastName = pm.environment.get('temp-last-name');",
                  "    pm.expect(jsonData.user_data.mail).to.eql(pm.environment.get('temp-email'));",
                  "    pm.expect(jsonData.user_data.gender).to.eql('f');",
                  "    pm.expect(jsonData.user_data.first_name).to.eql(firstName);",
                  "    pm.expect(jsonData.user_data.last_name).to.eql(lastName);",
                  "    pm.expect(jsonData.user_data.birthday).to.eql('1987-05-19');",
                  "    ",
                  "    const billing = jsonData.addresses.find(element => element.is_invoice_address === 1);",
                  "    pm.expect(billing.is_invoice_address).to.eql(1);",
                  "    pm.expect(billing.is_delivery_address).to.eql(0);",
                  "    pm.expect(billing.country).to.eql('DE');",
                  "    pm.expect(billing.zipcode).to.eql('54321');",
                  "    pm.expect(billing.state).to.eql('DE-SH');",
                  "    pm.expect(billing.first_name).to.eql(firstName);",
                  "    pm.expect(billing.last_name).to.eql(lastName);",
                  "    pm.expect(billing.company).to.eql('My Company');",
                  "    pm.expect(billing.street_2).to.eql('Street2');",
                  "    pm.expect(billing.phone).to.eql('12345');",
                  "    pm.expect(billing.gender).to.eql('f');",
                  "",
                  "    const shipping = jsonData.addresses.find(element => element.is_delivery_address === 1)",
                  "    pm.expect(shipping.country).to.eql('DE');",
                  "    pm.expect(shipping.zipcode).to.eql('12340');",
                  "    pm.expect(shipping.state).to.be.null;",
                  "    pm.expect(shipping.first_name).to.not.eql(firstName);",
                  "    pm.expect(shipping.last_name).to.not.eql(lastName);",
                  "    pm.expect(shipping.gender).to.eql('m');",
                  "});",
                  "",
                  "// unset temp variables",
                  "pm.environment.unset(\"temp-email\");",
                  "pm.environment.unset(\"temp-first-name\");",
                  "pm.environment.unset(\"temp-last-name\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set(\"temp-email\", pm.variables.replaceIn('{{$randomEmail}}'));",
                  "pm.environment.set(\"temp-first-name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
                  "pm.environment.set(\"temp-last-name\", pm.variables.replaceIn('{{$randomLastName}}'));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_register_customer}}",
                  "type": "text"
                },
                {
                  "key": "user",
                  "value": "{{temp-email}}",
                  "type": "text"
                },
                {
                  "key": "pass",
                  "value": "{{userPass}}",
                  "type": "text"
                },
                {
                  "key": "user_data[registration_date]",
                  "value": "2021-01-27T13:07:38+0000",
                  "type": "text"
                },
                {
                  "key": "user_data[first_name]",
                  "value": "{{temp-first-name}}",
                  "type": "text"
                },
                {
                  "key": "user_data[last_name]",
                  "value": "{{temp-last-name}}",
                  "type": "text"
                },
                {
                  "key": "user_data[gender]",
                  "value": "f",
                  "type": "text"
                },
                {
                  "key": "user_data[mail]",
                  "value": "{{temp-email}}",
                  "type": "text"
                },
                {
                  "key": "user_data[birthday]",
                  "value": "1987-05-19",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][is_invoice_address]",
                  "value": "0",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][is_delivery_address]",
                  "value": "1",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][first_name]",
                  "value": "{{$randomFirstName}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][last_name]",
                  "value": "{{$randomLastName}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][gender]",
                  "value": "m",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][street_1]",
                  "value": "{{$randomStreetAddress}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][zipcode]",
                  "value": "12340",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][city]",
                  "value": "{{$randomCity}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][country]",
                  "value": "DE",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][is_invoice_address]",
                  "value": "1",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][is_delivery_address]",
                  "value": "0",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][first_name]",
                  "value": "rewritten_first_name",
                  "description": "Seems like this field get rewritten no matter what we set",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][last_name]",
                  "value": "rewritten_last_name",
                  "description": "Seems like this field get rewritten no matter what we set",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][gender]",
                  "value": "m",
                  "description": "Seems like this field get rewritten no matter what we set",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][street_1]",
                  "value": "{{$randomStreetAddress}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][zipcode]",
                  "value": "54321",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][city]",
                  "value": "{{$randomCity}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][country]",
                  "value": "DE",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][state]",
                  "value": "DE-SH",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][company]",
                  "value": "My Company",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][street_2]",
                  "value": "Street2",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][phone]",
                  "value": "12345",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: set_settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Has settings changed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.shopgate_settings).to.be.a('array').to.be.not.empty;",
                  "    pm.expect(jsonData.shopgate_settings[0].name).to.eq('server');",
                  "    pm.expect(jsonData.shopgate_settings[0].old).to.eq('live');",
                  "    pm.expect(jsonData.shopgate_settings[0].new).to.eq('custom');",
                  "    pm.expect(jsonData.shopgate_settings[1].name).to.eq('api_url');",
                  "    pm.expect(jsonData.shopgate_settings[1].old).to.eq('https://api.shopgate.com/merchant/');",
                  "    pm.expect(jsonData.shopgate_settings[1].new).to.eq('http://some.url');",
                  "    pm.expect(jsonData.shopgate_settings[2].name).to.eq('product_types_to_export');",
                  "    pm.expect(jsonData.shopgate_settings[2].old).to.be.an('array').length(2);",
                  "    pm.expect(jsonData.shopgate_settings[2].new).to.eq('simple');",
                  "    pm.expect(jsonData.shopgate_settings[3].name).to.eq('shop_is_active');",
                  "    pm.expect(jsonData.shopgate_settings[3].old).to.eq(1);",
                  "    pm.expect(jsonData.shopgate_settings[3].new).to.eq('1');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_set_settings}}",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[0][name]",
                  "value": "server",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[0][value]",
                  "value": "custom",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[1][name]",
                  "value": "api_url",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[1][value]",
                  "value": "http://some.url",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[2][name]",
                  "value": "product_types_to_export",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[2][value]",
                  "value": "simple",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[3][name]",
                  "value": "shop_is_active",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[3][value]",
                  "value": "1",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: ping check change",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Ping Pong\", function () {",
                  "    pm.expect(jsonData.pong).to.eql('OK');",
                  "});",
                  "",
                  "pm.test('Plugin Versions', function () {",
                  "    pm.expect(jsonData.plugin_version).to.be.a('string').to.be.eq(pm.environment.get(\"gen_plugin_version\"));",
                  "    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
                  "    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
                  "",
                  "    pm.expect(jsonData.configuration.shop_is_active).to.be.eq(1);",
                  "    pm.expect(jsonData.configuration.server).to.be.eq('custom');",
                  "    pm.expect(jsonData.configuration.api_url).to.be.eq('http://some.url');",
                  "    pm.expect(jsonData.configuration.product_types_to_export).to.be.a('array').length(1);",
                  "    pm.expect(jsonData.configuration.product_types_to_export[0]).to.eq('simple');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_ping}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "var tstamp = Math.floor(Date.now() / 1000);",
          "",
          "// Use the CryptoJS",
          "var authUser = pm.environment.get('customer_number') + \"-\" + tstamp;",
          "var tokenData = \"SPA-\" + pm.environment.get('customer_number') + \"-\" + tstamp + \"-\" + pm.environment.get('api_key');",
          "",
          "var authToken = CryptoJS.SHA1(tokenData).toString();",
          "",
          "// Set the new header values",
          "pm.environment.set(\"gen_sg_header_auth_user\", authUser);",
          "pm.environment.set(\"gen_sg_header_auth_token\", authToken);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}
