{
  "info": {
    "_postman_id": "edbf7223-af65-4bc5-8a56-a6ea5646efed",
    "name": "SW6 CI Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Init",
      "item": [
        {
          "name": "System",
          "item": [
            {
              "name": "SW: get sales channel",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get Main Sales Channel data\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data[0].attributes.name).to.be.eq('Storefront');\r",
                      "    pm.environment.set(\"gen_salesChannel_id\", jsonData.data[0].id);\r",
                      "    pm.environment.set(\"gen_salesChannel_currency_id\", jsonData.data[0].attributes.currencyId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Storefront\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/sales-channel",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "sales-channel"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: get non default lang ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test finding non-default lang: \", function () {\r",
                      "    pm.expect(jsonData.total).to.eq(1);\r",
                      "    pm.environment.set(`gen_non_default_lang`, jsonData.data[0]);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{system_default_language}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search-ids/language",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search-ids",
                    "language"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: get Headless channel",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get values\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data[0].attributes.name).to.be.eq('Headless');\r",
                      "    pm.environment.set(\"gen_channel_headless_id\", jsonData.data[0].id);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Headless\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/sales-channel",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "sales-channel"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: get Rules",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"AlwaysValid rule\", function () {\r",
                      "    pm.expect(jsonData.data,'Should find 3 rules only').to.be.length(3);\r",
                      "    const alwaysValid = getByName('Always valid (Default)');\r",
                      "    pm.expect(alwaysValid).to.have.ownProperty('id');\r",
                      "    pm.environment.set(\"gen_rule_allValid_id\", alwaysValid.id);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Cart >= 0 rule\", function () {\r",
                      "    const cartRule = getByName('Cart >= 0');\r",
                      "    pm.expect(cartRule).to.have.ownProperty('id');\r",
                      "    pm.environment.set(\"gen_rule_cartGreaterThan0_id\", cartRule.id);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"USA customer rule\", function () {\r",
                      "    const usaRule = getByName('Customers from USA');\r",
                      "    pm.expect(usaRule).to.have.ownProperty('id');\r",
                      "    pm.environment.set(\"gen_rule_usaCustomer_id\", usaRule.id);\r",
                      "});\r",
                      "\r",
                      "function getByName(name) {\r",
                      "    return jsonData.data.find(rule => rule.name === name);\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"multi\",\r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Always valid (Default)\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Cart >= 0\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Customers from USA\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/rule",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "rule"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: change channel lang",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successfully changed Headless channel language\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "accept": true
                }
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"languageId\": \"{{gen_non_default_lang}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/sales-channel/{{gen_channel_headless_id}}",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "sales-channel",
                    "{{gen_channel_headless_id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: create customFieldSets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created all custom field sets\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"write-custom-field-sets\": {\r\n        \"entity\": \"custom_field_set\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"test_api_custom_fieltset_order\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"Test Order API Custom Field Set\"\r\n                    }\r\n                },\r\n                \"relations\": [\r\n                    {\r\n                        \"entityName\": \"order\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"test_api_custom_fieltset_address\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"Test Address API Custom Field Set\"\r\n                    }\r\n                },\r\n                \"relations\": [\r\n                    {\r\n                        \"entityName\": \"customer_address\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"{{created_customer_customFieldSet_id}}\",\r\n                \"name\": \"test_api_custom_fieltset_customer\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"Test Customer API Custom Field Set\"\r\n                    }\r\n                },\r\n                \"relations\": [\r\n                    {\r\n                        \"entityName\": \"customer\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/sync",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "sync"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: create customFields",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created all custom fields\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"write-custom-fields\": {\r\n        \"entity\": \"custom_field\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"5cbeeb4ee9929880f9e6d9ef8ccd81e1\",\r\n                \"customFieldSetId\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"api_order_custom_field_text_0001\",\r\n                \"type\": \"text\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"text\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Order Custom Field 0001: text\"\r\n                    }, \r\n                    \"componentName\": \"sw-field\", \r\n                    \"customFieldType\": \"text\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"6be2be70aeda8760d1d3c5b901c2d34b\",\r\n                \"customFieldSetId\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"api_order_custom_field_int_0001\",\r\n                \"type\": \"int\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"int\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Order Custom Field 0001: int\"\r\n                    }, \r\n                    \"componentName\": \"sw-field\", \r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"e7310ca83a5f57b6f8327d45c36c4c14\",\r\n                \"customFieldSetId\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"api_order_custom_field_float_0001\",\r\n                \"type\": \"float\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"float\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Order Custom Field 0001: float\"\r\n                    }, \r\n                    \"componentName\": \"sw-field\", \r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"4c911ad4306ba418894de07ffb5eec11\",\r\n                \"customFieldSetId\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"api_order_custom_field_bool_0001\",\r\n                \"type\": \"bool\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"checkbox\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Order Custom Field 0001: bool\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"checkbox\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"b5c7f79ff01c938ac5182a2483eb575c\",\r\n                \"customFieldSetId\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"api_address_custom_field_text_0001\",\r\n                \"type\": \"text\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"text\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Address Custom Field 0001: text\"\r\n                    }, \r\n                    \"componentName\": \"sw-field\", \r\n                    \"customFieldType\": \"text\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"e63481deddfe062bf19642e826eb4540\",\r\n                \"customFieldSetId\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"api_address_custom_field_int_0001\",\r\n                \"type\": \"int\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"int\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Address Custom Field 0001: int\"\r\n                    }, \r\n                    \"componentName\": \"sw-field\", \r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"7435ab1689eccdf3d5969259ef8bd383\",\r\n                \"customFieldSetId\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"api_address_custom_field_float_0001\",\r\n                \"type\": \"float\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"float\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Address Custom Field 0001: float\"\r\n                    }, \r\n                    \"componentName\": \"sw-field\", \r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"650a349b0f0b8b2d5e31fa02cc02f6b3\",\r\n                \"customFieldSetId\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"api_address_custom_field_bool_0001\",\r\n                \"type\": \"bool\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"checkbox\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Address Custom Field 0001: bool\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"checkbox\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/sync",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "sync"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: find other shipping",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Check ship methods\", function () {\r",
                      "    pm.expect(jsonData).to.haveOwnProperty('total').to.eq(2);\r",
                      "    jsonData.data.map((shippingMethod, index) => {\r",
                      "        pm.expect(shippingMethod.active).to.eq(true, `Expected shipping method to be active: '${shippingMethod.name}' >>>`);\r",
                      "        pm.environment.set(\"gen_shipMethod_nonSg_\" + index, shippingMethod.id);\r",
                      "    });\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{default_shipMethod_sgDefault_id}}\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{default_shipMethod_sgFree_id}}\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"availabilityRule\": {}\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/shipping-method",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "shipping-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: TMP update rule ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// marked as temp because of ticket SGSW6-88\r",
                      "pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "accept": true
                }
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"update-shipping-method\": {\r\n        \"entity\": \"shipping_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{default_shipMethod_sgDefault_id}}\",\r\n                \"availabilityRuleId\": \"{{default_rule_isShopgate_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{default_shipMethod_sgFree_id}}\",\r\n                \"availabilityRuleId\": \"{{default_rule_isShopgate_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{gen_shipMethod_nonSg_0}}\",\r\n                \"availabilityRuleId\": \"{{gen_rule_cartGreaterThan0_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{gen_shipMethod_nonSg_1}}\",\r\n                \"availabilityRuleId\": \"{{gen_rule_cartGreaterThan0_id}}\"\r\n            }\r\n        ]\r\n    },\r\n    \"update-payment-method\": {\r\n        \"entity\": \"payment_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{default_payMethod_sgDefault_id}}\",\r\n                \"availabilityRuleId\": \"{{default_rule_isShopgate_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/sync",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "sync"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Plugin",
          "item": [
            {
              "name": "SW: get shopgate plugin",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get values\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.environment.set(\"gen_plugin_version\", jsonData.data[0].attributes.version);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"composerName\",\r\n          \"value\": \"shopgate/cart-integration-shopware6\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/plugin",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "plugin"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: set SG configs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successfully created all SG system config entities\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "accept": true
                }
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n             {\r\n                 \"id\": \"16c16c5cf2a24afbaa2b9ad3ed1324af\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.customerNumber\",\r\n                \"configurationValue\": \"{{customer_number}}\"\r\n            },\r\n            {\r\n                \"id\": \"c9ee8625bc3a466ba073c8f6e9a10190\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.apiKey\",\r\n                \"configurationValue\": \"{{api_key}}\"\r\n            },\r\n            {\r\n                \"id\": \"8711de7d1e0045229f22e1fe0ba98e5f\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.shopNumber\",\r\n                \"configurationValue\": \"{{shop_number}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"a9cb89b54d594d1b87c4c55be91b7c16\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.shopNumber\",\r\n                \"configurationValue\": \"{{shop_number_headless}}\",\r\n                \"salesChannelId\": \"{{gen_channel_headless_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"afcd57208add408ca1a019d5996211f0\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.isActive\",\r\n                \"configurationValue\": true\r\n            },\r\n            {\r\n                \"id\": \"6a8a85fa614c4d0a889f749c8cde8205\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.productTypesToExport\",\r\n                \"configurationValue\": [\"simple\", \"variant\"]\r\n            }\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/sync",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "sync"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: check SG shipping",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "// Disabled until SGSW6-88 is handled\r",
                      "/*\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Check rules\", function () {\r",
                      "    jsonData.data.map(shippingMethod => pm.expect(shippingMethod.active).to.eq(true, `Expected shipping method to be active: '${shippingMethod.name}' >>>`));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check rules\", function () {\r",
                      "    pm.expect(jsonData.total).to.eql(2, 'Supposed to have 2 shipping methods installed.');\r",
                      "    jsonData.data.map(shipMethod => checkRule(shipMethod));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check deliveries\", function () {\r",
                      "    jsonData.data.map(shipMethod => checkDelivery(shipMethod));\r",
                      "});\r",
                      "*/\r",
                      "function checkDelivery(shippingMethod) {\r",
                      "    pm.expect(shippingMethod.deliveryTimeId).to.eq(\r",
                      "        pm.environment.get('default_deliveryTime_sg_id'),\r",
                      "        `Incorect default SG delivery time ID: ${shippingMethod.deliveryTimeId} for shipMethod: ${shippingMethod.name}  >>>` \r",
                      "    );\r",
                      "}\r",
                      "\r",
                      "function checkRule(shippingMethod) {\r",
                      "    pm.expect(shippingMethod, 'Rule not present in shipping method: ' + shippingMethod.name).has.ownProperty('availabilityRule').has.ownProperty('id')\r",
                      "    .to.eq(\r",
                      "        pm.environment.get('gen_rule_cartGreaterThan0_id'),\r",
                      "        `Incorect rule by name '${shippingMethod.availabilityRule.name}' for shipMethod: '${shippingMethod.name}' >>>` \r",
                      "    );\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"multi\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{default_shipMethod_sgDefault_id}}\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{default_shipMethod_sgFree_id}}\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"availabilityRule\": {}\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/shipping-method",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "shipping-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: set mock api url",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_set_settings}}",
                      "type": "text"
                    },
                    {
                      "key": "shopgate_settings[0][name]",
                      "value": "server",
                      "type": "text"
                    },
                    {
                      "key": "shopgate_settings[0][value]",
                      "value": "custom",
                      "type": "text"
                    },
                    {
                      "key": "shopgate_settings[1][name]",
                      "value": "api_url",
                      "type": "text"
                    },
                    {
                      "key": "shopgate_settings[1][value]",
                      "value": "{{mock_server_merchant_uri}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Catalog",
          "item": [
            {
              "name": "SW: get all categories",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.environment.set(\"gen_category_count\", jsonData.total);\r",
                      "\r",
                      "pm.test(\"Test finding home category by name: \" + pm.environment.get('category_main_name'), function () {\r",
                      "    pm.expect(jsonData.total).to.eq(8);\r",
                      "    jsonData.data.forEach(function(category, index) {\r",
                      "           pm.environment.set(`gen_category_uid_${index}`, category);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"{{category_main_name}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search-ids/category",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search-ids",
                    "category"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: get CMS page ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get values\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data[0].attributes.name).to.be.eq('Default category layout');\r",
                      "    pm.environment.set(\"gen_cms_page_default_id\", jsonData.data[0].id);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Default category layout\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/cms-page",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "cms-page"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: get prod taxId",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Tax ID saving\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data.taxId).to.be.a('string').to.not.be.empty;\r",
                      "    pm.environment.set('gen_product_variant_taxId', jsonData.data.taxId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_endpoint_api}}/product/{{catalog_product_variant}}",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "product",
                    "{{catalog_product_variant}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: get variant child",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get child ID\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    const child = jsonData.data.filter(product => product.attributes.productNumber === 'SWDEMO10005.3');\r",
                      "    pm.expect(child).length(1, 'Should have found a child product');\r",
                      "    pm.environment.set('gen_product_variant_child_id', child[0].id);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_api}}/product/{{catalog_product_variant}}/children",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "product",
                    "{{catalog_product_variant}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: clone variant child",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Product created\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"overwrites\": {\r\n        \"parentId\": \"{{catalog_product_variant}}\",\r\n        \"id\": \"{{created_product_variant_child_id}}\",\r\n        \"name\": \"API: Variant Child (Red-M)\",\r\n        \"productNumber\": \"SG.DEMO.CHILD.1\",\r\n        \"taxId\": \"{{gen_product_variant_taxId}}\",\r\n        \"price\": [\r\n            {\r\n                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                \"net\": 21.25,\r\n                \"gross\": 24.50,\r\n                \"linked\": true\r\n            }\r\n        ]\r\n    },\r\n    \"cloneChildren\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/clone/product/{{gen_product_variant_child_id}}",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "clone",
                    "product",
                    "{{gen_product_variant_child_id}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Customer",
          "item": [
            {
              "name": "SW: get customer group",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Test getting main customer group\", function () {\r",
                      "    pm.expect(jsonData.total).to.eq(1);\r",
                      "    pm.environment.set(`gen_customer_group_main_id`, jsonData.data[0]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"2fbb5fe2e29a4d70aa5854ce7ce3e20b\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search-ids/customer-group",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search-ids",
                    "customer-group"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: get address country",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get country ISO\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data).be.an('array').to.be.not.empty\r",
                      "    pm.expect(jsonData.data[0]).to.haveOwnProperty('attributes').to.haveOwnProperty('iso');\r",
                      "    pm.environment.set(\"gen_customer_default_country_iso\", jsonData.data[0].attributes.iso);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_api}}/customer-address/{{customer_default_address_id}}/country",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "customer-address",
                    "{{customer_default_address_id}}",
                    "country"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: create customer grp",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created customer group successfully\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"{{created_customerGroup_gross_id}}\",\r\n    \"name\": \"A custom group\",\r\n    \"displayGross\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/customer-group",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "customer-group"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: create customGrp customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Product created\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Save product id for later use\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.be.a('string').to.be.not.empty;\r",
                      "    pm.environment.set(\"gen_product_max_purchase_ten_id\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_customer_withCustomGrp_id}}\",\r\n        \"groupId\" : \"{{created_customerGroup_gross_id}}\",\r\n        \"email\": \"test_customGrp@example.com\",\r\n        \"firstName\" : \"API Created\",\r\n        \"lastName\": \"CustomGroup\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/clone/customer/{{customer_default_id}}",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "clone",
                    "customer",
                    "{{customer_default_id}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Promo / Coupons",
          "item": [
            {
              "name": "SW: create coupon code",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created entity successfully\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"{{created_promotion_byCode_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API: promo by code\",\r\n    \"code\": \"{{created_promotion_byCode_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 2.25\r\n        }\r\n    ],\r\n    \"salesChannels\":[\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/promotion",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "promotion"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: create USA billing promo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created entity successfully\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"{{created_promotion_customerUSA_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API: promo by Billing Country USA\",\r\n    \"code\": null,\r\n    \"exclusive\": false,\r\n    \"useCodes\": false,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"id\": \"{{created_discount_customerUSA_cart_1_id}}\",\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"percentage\",\r\n            \"value\": 10\r\n        },\r\n        {\r\n            \"id\": \"{{created_discount_customerUSA_delivery_1_id}}\",\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"delivery\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 1.5\r\n        },\r\n        {\r\n            \"id\": \"{{created_discount_customerUSA_delivery_2_id}}\",\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"delivery\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 1.0\r\n        }\r\n    ],\r\n    \"salesChannels\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/promotion",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "promotion"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: condition to USA promo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created entity successfully\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"promotionId\": \"{{created_promotion_customerUSA_id}}\",\r\n    \"ruleId\": \"{{gen_rule_usaCustomer_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/promotion-persona-rule",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "promotion-persona-rule"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "General Errors",
      "item": [
        {
          "name": "SG: incorrect login error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Your test name\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error_text).to.eq('authentication failed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}",
                "disabled": true
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_ping}}",
                  "type": "text"
                },
                {
                  "key": "debug_log",
                  "value": "1",
                  "type": "text"
                },
                {
                  "key": "use_errorhandler",
                  "value": "1",
                  "type": "text"
                },
                {
                  "key": "use_shutdown_handler",
                  "value": "1",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: incorrect shop",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Shop number does not exist\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eq(24);",
                  "    pm.expect(jsonData.error_text).to.eq('No shop_number exists in the Shopgate configuration. Configure a specific channel.');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "1234",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_ping}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: no shop_number",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Shop number does not exist\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eq(24);",
                  "    pm.expect(jsonData.error_text).to.eq('No shop_number property provided in the API call.');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "action",
                  "value": "{{framework_action_ping}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: get_orders bad token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Has error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(73);",
                  "    pm.expect(jsonData.error_text).to.eql('invalid customer token');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_get_orders}}",
                  "type": "text"
                },
                {
                  "key": "customer_token",
                  "value": "124",
                  "type": "text"
                },
                {
                  "key": "limit",
                  "value": "1",
                  "type": "text"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "type": "text"
                },
                {
                  "key": "customer_language",
                  "value": "",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "M: mock server check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Mockoon is enabled\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.error_text).to.eql('No Mockoon route found');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{mock_server_merchant_uri}}",
              "host": [
                "{{mock_server_merchant_uri}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Import",
      "item": [
        {
          "name": "AddOrder",
          "item": [
            {
              "name": "SG: addOrder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Order added properly\", function () {",
                      "    if (pm.globals.get('verbose')) {",
                      "        console.log(jsonData);",
                      "    }",
                      "",
                      "    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
                      "    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
                      "    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
                      "});",
                      "",
                      "const order_number = getValue(pm.request.body.formdata, 'order_number');",
                      "pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
                      "",
                      "function getValue(data, incomingKey) {",
                      "    const found = data.find(function({key}) {",
                      "        return key === incomingKey;",
                      "    });",
                      "    return found && found.hasOwnProperty('value') ? found.value : null;",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_add_order}}",
                      "type": "text"
                    },
                    {
                      "key": "order_number",
                      "value": "0001",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: check order",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const order = jsonData.data[0];\r",
                      "pm.test(\"Check order data\", function () {\r",
                      "    pm.expect(order.shippingTotal).to.eql(4.9);\r",
                      "    pm.expect(order.affiliateCode).to.eql(null);\r",
                      "    pm.expect(order.campaignCode).to.eql(null);\r",
                      "    pm.expect(order.orderCustomer.email).to.eql('test@example.com');\r",
                      "    pm.expect(order.orderCustomer.customFields).to.eql(null);\r",
                      "});\r",
                      "pm.test(\"Custom Field data for order good\", function () {\r",
                      "    pm.expect(order.customFields, 'Should be also mapped:').to.haveOwnProperty('unmapped_custom_field');\r",
                      "    pm.expect(order.customFields).to.haveOwnProperty('api_order_custom_field_int_0001').to.eq(13);\r",
                      "    pm.expect(order.customFields).to.haveOwnProperty('api_order_custom_field_float_0001').to.eq(11.5);\r",
                      "    pm.expect(order.customFields).to.haveOwnProperty('api_order_custom_field_bool_0001').to.eq(true);\r",
                      "    pm.expect(order.customFields).to.haveOwnProperty('api_order_custom_field_text_0001').to.eq('mapped string value');\r",
                      "});\r",
                      "pm.test(\"Billing custom field data is good\", function () {\r",
                      "    pm.expect(order.billingAddress.customFields).to.haveOwnProperty('api_address_custom_field_int_0001').to.eq(17);\r",
                      "    pm.expect(order.billingAddress.customFields).to.haveOwnProperty('api_address_custom_field_float_0001').to.eq(3.3);\r",
                      "    pm.expect(order.billingAddress.customFields).to.haveOwnProperty('api_address_custom_field_bool_0001').to.eq(false);\r",
                      "    pm.expect(order.billingAddress.customFields).to.haveOwnProperty('api_address_custom_field_text_0001').to.eq('mapped string value as well');\r",
                      "    pm.expect(order.billingAddress.customFields, 'Should be also mapped:').to.haveOwnProperty('unmapped_field');\r",
                      "});\r",
                      "\r",
                      "   "
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        {\r\n          \"type\": \"equals\",\r\n          \"field\": \"id\",\r\n          \"value\": \"{{gen_order_0001_id}}\"\r\n        }\r\n    ],\r\n    \"associations\":{\r\n        \"billingAddress\":{}\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/order",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "order"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: addOrder (guest)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Order added properly\", function () {",
                      "    if (pm.globals.get('verbose')) {",
                      "        console.log(jsonData);",
                      "    }",
                      "",
                      "    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
                      "    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
                      "    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
                      "});",
                      "",
                      "const order_number = getValue(pm.request.body.formdata, 'order_number');",
                      "pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
                      "",
                      "function getValue(data, incomingKey) {",
                      "    const found = data.find(function({key}) {",
                      "        return key === incomingKey;",
                      "    });",
                      "    return found && found.hasOwnProperty('value') ? found.value : null;",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_add_order}}",
                      "type": "text"
                    },
                    {
                      "key": "order_number",
                      "value": "0002",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: check order (guest)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const order = jsonData.data[0];\r",
                      "pm.test(\"Check order data\", function () {\r",
                      "    pm.expect(order.shippingTotal).to.eql(4.9);\r",
                      "    pm.expect(order.affiliateCode).to.eql(null);\r",
                      "    pm.expect(order.campaignCode).to.eql(null);\r",
                      "    pm.expect(order.orderCustomer.email).to.eql('guest_customer@apite.io');\r",
                      "    pm.expect(order.orderCustomer.customFields).to.eql(null);\r",
                      "    pm.expect(order.customFields).to.eql(null);\r",
                      "    pm.expect(order.billingAddress.customFields).to.eql(null);\r",
                      "});\r",
                      "\r",
                      "   "
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        {\r\n          \"type\": \"equals\",\r\n          \"field\": \"id\",\r\n          \"value\": \"{{gen_order_0002_id}}\"\r\n        }\r\n    ],\r\n    \"associations\":{\r\n        \"billingAddress\":{}\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/order",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "order"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "SG: register_customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Check customer data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (pm.globals.get('verbose')) {",
                  "        console.log(jsonData);",
                  "    }",
                  "    const firstName = pm.environment.get('temp-first-name');",
                  "    const lastName = pm.environment.get('temp-last-name');",
                  "    pm.expect(jsonData.user_data.mail).to.eql(pm.environment.get('temp-email'));",
                  "    pm.expect(jsonData.user_data.gender).to.eql('f');",
                  "    pm.expect(jsonData.user_data.first_name).to.eql(firstName);",
                  "    pm.expect(jsonData.user_data.last_name).to.eql(lastName);",
                  "    pm.expect(jsonData.user_data.birthday).to.eql('1987-05-19');",
                  "    pm.expect(jsonData.user_data.custom_fields).length(3, 'Expected 3 elements because accountType is not exported');",
                  "    pm.expect(jsonData.user_data.custom_fields[2].internal_field_name).to.eq('vatIds');",
                  "    pm.expect(jsonData.user_data.custom_fields[2].value).to.eq('1234,12345');",
                  "    pm.expect(jsonData.user_data.custom_fields[1].internal_field_name).to.eq('affiliateCode');",
                  "    pm.expect(jsonData.user_data.custom_fields[1].value).to.eq('AFFILIATE_CODE');",
                  "    pm.expect(jsonData.user_data.custom_fields[0].internal_field_name).to.eq('title');",
                  "    pm.expect(jsonData.user_data.custom_fields[0].value).to.eq('Big Boss');",
                  "    ",
                  "    const billing = jsonData.addresses.find(element => element.is_invoice_address === 1);",
                  "    pm.expect(billing.is_invoice_address).to.eql(1);",
                  "    pm.expect(billing.is_delivery_address).to.eql(0);",
                  "    pm.expect(billing.country).to.eql('DE');",
                  "    pm.expect(billing.zipcode).to.eql('54321');",
                  "    pm.expect(billing.state).to.eql('DE-SH');",
                  "    pm.expect(billing.first_name).to.eql(firstName);",
                  "    pm.expect(billing.last_name).to.eql(lastName);",
                  "    pm.expect(billing.company).to.eql('My Company');",
                  "    pm.expect(billing.street_2).to.eql('Street2');",
                  "    pm.expect(billing.phone).to.eql('12345');",
                  "    pm.expect(billing.gender).to.eql('f');",
                  "    pm.expect(billing.custom_fields).length(1, 'Billing 1 custom field')",
                  "    pm.expect(billing.custom_fields[0].internal_field_name).to.eq('department');",
                  "    pm.expect(billing.custom_fields[0].value).to.eq('Some department');",
                  "",
                  "    const shipping = jsonData.addresses.find(element => element.is_delivery_address === 1)",
                  "    pm.expect(shipping.country).to.eql('DE');",
                  "    pm.expect(shipping.zipcode).to.eql('12340');",
                  "    pm.expect(shipping.state).to.be.null;",
                  "    pm.expect(shipping.first_name).to.not.eql(firstName);",
                  "    pm.expect(shipping.last_name).to.not.eql(lastName);",
                  "    pm.expect(shipping.gender).to.eql('m');",
                  "    pm.expect(shipping.custom_fields).length(0, 'Shipping should have no custom fields');",
                  "});",
                  "",
                  "// unset temp variables",
                  "pm.environment.unset(\"temp-email\");",
                  "pm.environment.unset(\"temp-first-name\");",
                  "pm.environment.unset(\"temp-last-name\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set(\"temp-email\", pm.variables.replaceIn('{{$randomEmail}}'));",
                  "pm.environment.set(\"temp-first-name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
                  "pm.environment.set(\"temp-last-name\", pm.variables.replaceIn('{{$randomLastName}}'));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_register_customer}}",
                  "type": "text"
                },
                {
                  "key": "user",
                  "value": "{{temp-email}}",
                  "type": "text"
                },
                {
                  "key": "pass",
                  "value": "{{userPass}}",
                  "type": "text"
                },
                {
                  "key": "user_data[registration_date]",
                  "value": "2021-01-27T13:07:38+0000",
                  "type": "text"
                },
                {
                  "key": "user_data[first_name]",
                  "value": "{{temp-first-name}}",
                  "type": "text"
                },
                {
                  "key": "user_data[last_name]",
                  "value": "{{temp-last-name}}",
                  "type": "text"
                },
                {
                  "key": "user_data[gender]",
                  "value": "f",
                  "type": "text"
                },
                {
                  "key": "user_data[mail]",
                  "value": "{{temp-email}}",
                  "type": "text"
                },
                {
                  "key": "user_data[birthday]",
                  "value": "1987-05-19",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][is_invoice_address]",
                  "value": "0",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][is_delivery_address]",
                  "value": "1",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][first_name]",
                  "value": "{{$randomFirstName}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][last_name]",
                  "value": "{{$randomLastName}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][gender]",
                  "value": "m",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][street_1]",
                  "value": "{{$randomStreetAddress}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][zipcode]",
                  "value": "12340",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][city]",
                  "value": "{{$randomCity}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][country]",
                  "value": "DE",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][is_invoice_address]",
                  "value": "1",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][is_delivery_address]",
                  "value": "0",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][first_name]",
                  "value": "rewritten_first_name",
                  "description": "Seems like this field get rewritten no matter what we set",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][last_name]",
                  "value": "rewritten_last_name",
                  "description": "Seems like this field get rewritten no matter what we set",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][gender]",
                  "value": "m",
                  "description": "Seems like this field get rewritten no matter what we set",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][street_1]",
                  "value": "{{$randomStreetAddress}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][zipcode]",
                  "value": "54321",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][city]",
                  "value": "{{$randomCity}}",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][country]",
                  "value": "DE",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][state]",
                  "value": "DE-SH",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][company]",
                  "value": "My Company",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][street_2]",
                  "value": "Street2",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][phone]",
                  "value": "12345",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][0][name]",
                  "value": "VAT IDs",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][0][internal_field_name]",
                  "value": "vatIds",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][0][value]",
                  "value": "1234,12345",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][1][internal_field_name]",
                  "value": "affiliateCode",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][1][value]",
                  "value": "AFFILIATE_CODE",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][2][internal_field_name]",
                  "value": "title",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][2][value]",
                  "value": "Big Boss",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][3][internal_field_name]",
                  "value": "accountType",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][3][value]",
                  "value": "business",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][4][internal_field_name]",
                  "value": "cannotMap",
                  "type": "text"
                },
                {
                  "key": "user_data[custom_fields][4][value]",
                  "value": "not mapped",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][custom_fields][0][internal_field_name]",
                  "value": "title",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][custom_fields][0][value]",
                  "value": "Mr.",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][custom_fields][1][internal_field_name]",
                  "value": "notMapped",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][custom_fields][1][value]",
                  "value": "not mapped either",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][custom_fields][2][internal_field_name]",
                  "value": "department",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][1][custom_fields][2][value]",
                  "value": "Some department",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][custom_fields][0][internal_field_name]",
                  "value": "title",
                  "type": "text"
                },
                {
                  "key": "user_data[addresses][0][custom_fields][0][value]",
                  "value": "Mrs.",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: set_settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Has settings changed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.shopgate_settings).to.be.a('array').to.be.not.empty;",
                  "    pm.expect(jsonData.shopgate_settings[0].name).to.eq('product_types_to_export');",
                  "    pm.expect(jsonData.shopgate_settings[0].old).to.be.an('array').length(2);",
                  "    pm.expect(jsonData.shopgate_settings[0].new).to.eq('simple');",
                  "    pm.expect(jsonData.shopgate_settings[1].name).to.eq('shop_is_active');",
                  "    pm.expect(jsonData.shopgate_settings[1].old).to.eq(1);",
                  "    pm.expect(jsonData.shopgate_settings[1].new).to.eq('1');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_set_settings}}",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[0][name]",
                  "value": "product_types_to_export",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[0][value]",
                  "value": "simple",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[1][name]",
                  "value": "shop_is_active",
                  "type": "text"
                },
                {
                  "key": "shopgate_settings[1][value]",
                  "value": "1",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: ping check change",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Ping Pong\", function () {",
                  "    pm.expect(jsonData.pong).to.eql('OK');",
                  "});",
                  "",
                  "pm.test('Plugin Versions', function () {",
                  "    pm.expect(jsonData.plugin_version).to.be.a('string').to.be.eq(pm.environment.get(\"gen_plugin_version\"));",
                  "    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
                  "    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
                  "",
                  "    pm.expect(jsonData.configuration.shop_is_active).to.be.eq(1);",
                  "    pm.expect(jsonData.configuration.server).to.be.eq('custom');",
                  "    pm.expect(jsonData.configuration.product_types_to_export).to.be.a('array').length(1);",
                  "    pm.expect(jsonData.configuration.product_types_to_export[0]).to.eq('simple');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_ping}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Export",
      "item": [
        {
          "name": "Category",
          "item": [
            {
              "name": "Basic",
              "item": [
                {
                  "name": "SG: get specific",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"Have proper category data\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "    if (pm.globals.get('verbose')){",
                          "        console.log(jsonObject);",
                          "    }",
                          "    pm.expect(jsonObject.categories.category).to.have.property('$');",
                          "    pm.expect(jsonObject.categories.category.$.uid, 'UUID not found').to.be.a('string').to.be.eq(pm.environment.get(\"gen_category_uid_0\"));",
                          "    pm.expect(jsonObject.categories.category.$.sort_order).to.be.a('string').to.match(/^\\d+$/).to.eq('3');",
                          "    pm.expect(jsonObject.categories.category.$.is_active).to.be.eq('0');",
                          "    pm.expect(jsonObject.categories.category.$.is_anchor).to.be.eq('1');",
                          "    pm.expect(jsonObject.categories.category, 'Name not set').to.have.property('name').to.be.a('string').to.be.not.empty;",
                          "    pm.expect(jsonObject.categories.category, 'Deeplink not set').to.have.property('deeplink').to.be.a('string').to.be.empty;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_categories}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{gen_category_uid_0}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SG: get specific  2",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"Have proper category data\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "    if (pm.globals.get('verbose')){",
                          "        console.log(jsonObject);",
                          "    }",
                          "    pm.expect(jsonObject.categories.category).to.have.property('$');",
                          "    pm.expect(jsonObject.categories.category.$.uid, 'UUID not found').to.be.a('string').to.be.eq(pm.environment.get(\"gen_category_uid_1\"));",
                          "    pm.expect(jsonObject.categories.category.$.sort_order).to.be.a('string').to.match(/^\\d+$/).to.eq('3');",
                          "    pm.expect(jsonObject.categories.category.$.is_active).to.be.eq('1');",
                          "    pm.expect(jsonObject.categories.category.$.is_anchor).to.be.eq('1');",
                          "    pm.expect(jsonObject.categories.category.$.parent_uid).to.be.eq('77b959cf66de4c1590c7f9b7da3982f3');",
                          "    pm.expect(jsonObject.categories.category, 'Name not set').to.have.property('name').to.be.a('string').to.be.eq('Bakery products');",
                          "    pm.expect(jsonObject.categories.category, 'Deeplink not set').to.have.property('deeplink').to.be.a('string').to.be.eq(pm.environment.get(\"host\") + pm.globals.get(\"system_port\") + '/Food/Bakery-products/');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_categories}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{gen_category_uid_1}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SG: get first 5",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"have categories\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "    if (pm.globals.get('verbose')) {",
                          "        console.log(jsonObject.categories.category[0]);",
                          "    }",
                          "",
                          "    pm.expect(jsonObject.categories.category).length(5);",
                          "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_0\")), 'Missing 0').to.be.not.undefined;",
                          "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_1\")), 'Missing 1').to.be.not.undefined;",
                          "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_2\")), 'Missing 2').to.be.not.undefined;",
                          "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_3\")), 'Missing 3').to.be.not.undefined;",
                          "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_4\")), 'Missing 4').to.be.not.undefined;",
                          "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_5\")), 'Have 5?').to.be.undefined;",
                          "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_6\")), 'Have 6?').to.be.undefined;",
                          "});",
                          "",
                          "/**",
                          " * @param {array} list",
                          " * @param {string} id",
                          " */",
                          "function findById(list, id) {",
                          "    return list.find(element => element.$.uid === id);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_categories}}",
                          "type": "text"
                        },
                        {
                          "key": "limit",
                          "value": "5",
                          "type": "text"
                        },
                        {
                          "key": "offset",
                          "value": "1",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{gen_category_uid_0}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[1]",
                          "value": "{{gen_category_uid_1}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[2]",
                          "value": "{{gen_category_uid_2}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[3]",
                          "value": "{{gen_category_uid_3}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[4]",
                          "value": "{{gen_category_uid_4}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[5]",
                          "value": "{{gen_category_uid_5}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[6]",
                          "value": "{{gen_category_uid_6}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SG: get last 5",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"have categories\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "",
                          "    if (pm.globals.get('verbose')) {",
                          "        console.log(jsonObject.categories.category[0]);",
                          "    }",
                          "    pm.expect(jsonObject.categories.category).length(2);",
                          "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_5\")), '5 should be undefined').to.be.not.undefined;",
                          "    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_6\")), '6 should be undefined').to.be.not.undefined;",
                          "});",
                          "",
                          "/**",
                          " * @param {array} list",
                          " * @param {string} id",
                          " */",
                          "function findById(list, id) {",
                          "    return list.find(element => element.$.uid === id);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_categories}}",
                          "type": "text"
                        },
                        {
                          "key": "limit",
                          "value": "5",
                          "type": "text"
                        },
                        {
                          "key": "offset",
                          "value": "2",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{gen_category_uid_0}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[1]",
                          "value": "{{gen_category_uid_1}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[2]",
                          "value": "{{gen_category_uid_2}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[3]",
                          "value": "{{gen_category_uid_3}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[4]",
                          "value": "{{gen_category_uid_4}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[5]",
                          "value": "{{gen_category_uid_5}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[6]",
                          "value": "{{gen_category_uid_6}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SG: unlimited",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"Check list of categories\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "",
                          "    if (pm.globals.get('verbose')) {",
                          "        console.log(jsonObject.categories.category[0]);",
                          "    }",
                          "",
                          "    pm.expect(jsonObject.categories.category).length(pm.environment.get('gen_category_count'), 'Should be one less because root category is not exported in SG');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_categories}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Product",
          "item": [
            {
              "name": "Dynamic",
              "item": [
                {
                  "name": "SG: check before",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"Product has only one category\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "    if (pm.globals.get('verbose')){",
                          "        console.log(jsonObject);",
                          "    }",
                          "",
                          "    pm.expect(jsonObject.items.item.categories.category.$.uid).to.be.eq(pm.environment.get('category_freeTime_id'));",
                          "    pm.expect(jsonObject.items.item.categories.category.$.sort_order).to.be.eq('2');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_items}}",
                          "type": "text"
                        },
                        {
                          "key": "limit",
                          "value": "100",
                          "description": "\n",
                          "type": "text"
                        },
                        {
                          "key": "offset",
                          "value": "0",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{catalog_product_main_id}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SW: create freeShip cat",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Created single entity\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {
                      "accept": true
                    }
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{created_category_noFreeShip_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product_stream\",\r\n    \"name\": \"No Free Ship Dynamic Cat\",\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\",\r\n    \"productStream\": {\r\n        \"id\": \"{{created_stream_noFreeShip_id}}\",\r\n        \"name\": \"No Free Shipping products\",\r\n        \"filters\": [\r\n            {\r\n                \"productStreamId\": \"{{created_stream_noFreeShip_id}}\",\r\n                \"type\": \"equals\",\r\n                \"field\": \"shippingFree\",\r\n                \"value\": \"1\",\r\n                \"parent\": {\r\n                    \"productStreamId\": \"{{created_stream_noFreeShip_id}}\",\r\n                    \"type\": \"not\",\r\n                    \"value\": \"0\",\r\n                    \"parent\": {\r\n                        \"productStreamId\" :\"{{created_stream_noFreeShip_id}}\",\r\n                        \"type\": \"multi\",\r\n                        \"operator\": \"AND\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/category",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "category"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SG: category created",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"Dynamic category created\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "    if (pm.globals.get('verbose')){",
                          "        console.log(jsonObject);",
                          "    }",
                          "",
                          "    pm.expect(jsonObject.categories.category.$.is_active).to.be.eq('1');",
                          "    pm.expect(jsonObject.categories.category.$.is_anchor).to.be.eq('1');",
                          "    pm.expect(jsonObject.categories.category, 'Name not set').to.have.property('name').to.be.eq('No Free Ship Dynamic Cat')",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_categories}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{created_category_noFreeShip_id}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SG: check after",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"Is in the dynamic category\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "    if (pm.globals.get('verbose')){",
                          "        console.log(jsonObject);",
                          "    }",
                          "",
                          "    pm.expect(jsonObject.items.item.categories.category).to.be.an('array', 'Should be more than 1 category').length(2);",
                          "    pm.expect(jsonObject.items.item.categories.category[0].$.uid).to.be.eq(pm.environment.get('created_category_noFreeShip_id'));",
                          "    pm.expect(jsonObject.items.item.categories.category[0].$.sort_order).to.be.eq('1');",
                          "    pm.expect(jsonObject.items.item.categories.category[1].$.sort_order).to.be.eq('2');",
                          "});",
                          "",
                          "pm.test(\"Header check\", function () {",
                          "    pm.response.to.be.header(\"Content-Type\", 'application/xml');",
                          "    pm.response.to.have.header('Content-Length');",
                          "    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"shopgate_items.xml\"');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_items}}",
                          "type": "text"
                        },
                        {
                          "key": "limit",
                          "value": "100",
                          "description": "\n",
                          "type": "text"
                        },
                        {
                          "key": "offset",
                          "value": "0",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{catalog_product_main_id}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Manual Category Sort",
              "item": [
                {
                  "name": "SW: create manual cat",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Created single entity\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {}
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{created_category_manual_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"afterCategoryId\": \"{{created_category_noFreeShip_id}}\",\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product\",\r\n    \"name\": \"Manual products category\",\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/category",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "category"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SW: create prod map",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Successfully created all SG system config entities\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {
                      "accept": true
                    }
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"write-product-category\": {\r\n        \"entity\": \"product_category\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{catalog_product_disabled}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_variant}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/_action/sync",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "_action",
                        "sync"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SG: get all products",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "const jsonObject = xml2Json(responseBody);",
                          "if (pm.globals.get('verbose')) {",
                          "    console.log(jsonObject);",
                          "}",
                          "pm.test(\"Check product sort\", function () {",
                          "    checkManualCategoryExistence(pm.environment.get('catalog_product_advPrices_id'), '4');",
                          "    checkManualCategoryExistence(pm.environment.get('catalog_product_freeShip'), '2');",
                          "    checkManualCategoryExistence(pm.environment.get('catalog_product_variant'), '1');",
                          "    checkManualCategoryExistence(pm.environment.get('catalog_product_props'), '3');",
                          "});",
                          "",
                          "function checkManualCategoryExistence(productId, positionNumber) {",
                          "    const product = getObjectById(productId, jsonObject.items.item);",
                          "    pm.expect(product, 'Could not locate product by id: ' + productId).to.haveOwnProperty('categories');",
                          "    const category = getObjectById(pm.environment.get('created_category_manual_id'), product.categories.category);",
                          "    if (pm.globals.get('verbose')) {",
                          "        console.log(productId, category.$.sort_order);",
                          "    }",
                          "    pm.expect(category, 'Could not locate manual category for prod id: ' + productId).to.haveOwnProperty('$').to.haveOwnProperty('sort_order').to.eq(positionNumber);",
                          "}",
                          "",
                          "function getObjectById(id, object) {",
                          "    return object.find(item => item.$.uid === id);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_items}}",
                          "type": "text"
                        },
                        {
                          "key": "limit",
                          "value": "100",
                          "description": "\n",
                          "type": "text"
                        },
                        {
                          "key": "offset",
                          "value": "0",
                          "type": "text"
                        },
                        {
                          "key": "debug_log",
                          "value": "1",
                          "type": "text"
                        },
                        {
                          "key": "use_errorhandler",
                          "value": "1",
                          "type": "text"
                        },
                        {
                          "key": "use_shutdown_handler",
                          "value": "1",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Cross Sell",
              "item": [
                {
                  "name": "SW: create active stream",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Created single entity\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {}
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{created_stream_allActive_id}}\",\r\n    \"name\": \"All active stream\",\r\n    \"filters\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"active\",\r\n            \"value\": \"1\",\r\n            \"parent\": {\r\n                \"type\": \"multi\",\r\n                \"operator\": \"AND\"\r\n            }\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/product-stream",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "product-stream"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SW: create CS",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Successfully created all SG system config entities\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {
                      "accept": true
                    }
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"write-product-cross-selling\": {\r\n        \"entity\": \"product_cross_selling\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Upsell: All active, 3 limit\",\r\n                \"position\": 4,\r\n                \"type\": \"productStream\",\r\n                \"active\": true,\r\n                \"limit\": 3,\r\n                \"productStreamId\": \"{{created_stream_allActive_id}}\",\r\n                \"sortBy\": \"price\",\r\n                \"sortDirection\": \"DESC\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Relations: all active\",\r\n                \"position\": 6,\r\n                \"type\": \"productStream\",\r\n                \"active\": true,\r\n                \"limit\": 10,\r\n                \"productStreamId\": \"{{created_stream_allActive_id}}\",\r\n                \"sortBy\": \"name\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Disabled list\",\r\n                \"position\": 3,\r\n                \"type\": \"productList\",\r\n                \"active\": false,\r\n                \"assignedProducts\": [\r\n                    {\r\n                        \"productId\": \"{{gen_product_variant_child_id}}\",\r\n                        \"position\": 1\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Cross Sell: manual 2, 1 dis, 1 dupe\",\r\n                \"position\": 2,\r\n                \"type\": \"productList\",\r\n                \"active\": true,\r\n                \"assignedProducts\": [\r\n                    {\r\n                        \"productId\": \"{{catalog_product_disabled}}\",\r\n                        \"position\": 2\r\n                    },\r\n                    {\r\n                        \"productId\": \"{{gen_product_variant_child_id}}\",\r\n                        \"position\": 1\r\n                    },\r\n                    {\r\n                        \"productId\": \"{{catalog_product_props}}\",\r\n                        \"position\": 3\r\n                    },\r\n                    {\r\n                        \"productId\": \"{{catalog_product_variant}}\",\r\n                        \"position\": 4\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Custom: manual 3\",\r\n                \"position\": 5,\r\n                \"type\": \"productList\",\r\n                \"active\": true,\r\n                \"assignedProducts\": [\r\n                    {\r\n                        \"productId\": \"{{catalog_product_freeShip}}\",\r\n                        \"position\": 1\r\n                    },\r\n                    {\r\n                        \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n                        \"position\": 2\r\n                    },\r\n\r\n                    {\r\n                        \"productId\": \"{{catalog_product_props}}\",\r\n                        \"position\": 3\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Not exported\",\r\n                \"position\": 7,\r\n                \"type\": \"productStream\",\r\n                \"active\": true,\r\n                \"productStreamId\": \"{{created_stream_noFreeShip_id}}\",\r\n                \"sortBy\": \"name\"\r\n            }\r\n        ]\r\n    }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/_action/sync",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "_action",
                        "sync"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SG: check CS exist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"Is in the dynamic category\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "    if (pm.globals.get('verbose')){",
                          "        console.log(jsonObject);",
                          "    }",
                          "",
                          "    pm.expect(jsonObject.items.item.relations.relation).to.be.an('array', 'Where are the sliders?').length(4, 'Should be 4 sliders max');",
                          "    pm.expect(jsonObject.items.item.relations.relation[0].$.type).to.be.eq('crosssell');",
                          "    pm.expect(jsonObject.items.item.relations.relation[0].uid).to.be.an('array', 'Where be the children 1?').length(2, 'Should be 2. Maybe child displaying?');",
                          "    pm.expect(jsonObject.items.item.relations.relation[0].uid[0]).to.be.eq(pm.environment.get('catalog_product_variant'));",
                          "    pm.expect(jsonObject.items.item.relations.relation[0].uid[1]).to.be.eq(pm.environment.get('catalog_product_props'));",
                          "",
                          "    pm.expect(jsonObject.items.item.relations.relation[1].$.type).to.be.eq('upsell');",
                          "    pm.expect(jsonObject.items.item.relations.relation[1].uid).to.be.an('array', 'Where be the children 2?').length(3, 'All active, 3 limit');",
                          "    pm.expect(jsonObject.items.item.relations.relation[1].uid[0]).to.be.eq(pm.environment.get('catalog_product_advPrices_id'));",
                          "    pm.expect(jsonObject.items.item.relations.relation[1].uid[1]).to.be.eq(pm.environment.get('catalog_product_main_id'));",
                          "    pm.expect(jsonObject.items.item.relations.relation[1].uid[2]).to.be.eq(pm.environment.get('catalog_product_freeShip'));",
                          "",
                          "    pm.expect(jsonObject.items.item.relations.relation[2].$.type).to.be.eq('custom');",
                          "    pm.expect(jsonObject.items.item.relations.relation[2].label).to.be.an('string').to.be.eq('Custom: manual 3');",
                          "    pm.expect(jsonObject.items.item.relations.relation[2].uid).to.be.an('array', 'Where be the children 3?').length(3, '3 manual products');",
                          "    pm.expect(jsonObject.items.item.relations.relation[2].uid[0]).to.be.eq(pm.environment.get('catalog_product_freeShip'));",
                          "    pm.expect(jsonObject.items.item.relations.relation[2].uid[1]).to.be.eq(pm.environment.get('catalog_product_advPrices_id'));",
                          "    pm.expect(jsonObject.items.item.relations.relation[2].uid[2]).to.be.eq(pm.environment.get('catalog_product_props'));",
                          "",
                          "    pm.expect(jsonObject.items.item.relations.relation[3].$.type).to.be.eq('relation');",
                          "    pm.expect(jsonObject.items.item.relations.relation[3].uid).to.be.an('array', 'Where be the children 4?').length(5, 'All 5 products?');",
                          "    pm.expect(jsonObject.items.item.relations.relation[3].uid[0]).to.be.eq(pm.environment.get('catalog_product_main_id'));",
                          "    pm.expect(jsonObject.items.item.relations.relation[3].uid[1]).to.be.eq(pm.environment.get('catalog_product_advPrices_id'));",
                          "    pm.expect(jsonObject.items.item.relations.relation[3].uid[2]).to.be.eq(pm.environment.get('catalog_product_props'));",
                          "    pm.expect(jsonObject.items.item.relations.relation[3].uid[3]).to.be.eq(pm.environment.get('catalog_product_freeShip'));",
                          "    pm.expect(jsonObject.items.item.relations.relation[3].uid[4]).to.be.eq(pm.environment.get('catalog_product_variant'));",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_items}}",
                          "type": "text"
                        },
                        {
                          "key": "limit",
                          "value": "100",
                          "description": "\n",
                          "type": "text"
                        },
                        {
                          "key": "offset",
                          "value": "0",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{catalog_product_main_id}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Regular prices",
              "item": [
                {
                  "name": "SG: check prices",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"Checking basic prices\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "    if (pm.globals.get('verbose')){",
                          "        console.log(jsonObject);",
                          "    }",
                          "",
                          "    pm.expect(jsonObject.items.item.prices.$, 'Price should have a type').to.haveOwnProperty('type').to.be.eq('gross',' Should be gross property set');",
                          "    pm.expect(jsonObject.items.item.prices.price).to.be.eq('19.99');",
                          "    pm.expect(jsonObject.items.item.prices.msrp).to.be.eq('0');",
                          "    pm.expect(jsonObject.items.item.prices.base_price).to.be.eq('Content: 1');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_items}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{catalog_product_variant}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Tier Prices",
              "item": [
                {
                  "name": "SG: customer grp tier",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"Checking that customer group tier prices are discounted\", function () {",
                          "    const jsonObject = xml2Json(responseBody);",
                          "    if (pm.globals.get('verbose')){",
                          "        console.log(jsonObject);",
                          "    }",
                          "",
                          "    pm.expect(jsonObject.items.item.prices.$, 'Price should have a type').to.haveOwnProperty('type').to.be.eq('gross',' Should be gross property set');",
                          "    pm.expect(jsonObject.items.item.prices.price).to.be.eq('950');",
                          "    pm.expect(jsonObject.items.item.prices.base_price).to.be.eq('Content: 1');",
                          "    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$.threshold).to.be.eq('12');",
                          "    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1]._).to.be.eq('200');",
                          "    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$.type).to.be.eq('fixed');",
                          "    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$, 'Should be a customer group tier price')",
                          "    .to.haveOwnProperty('customer_group_uid')",
                          "    .to.be.eq(pm.environment.get('gen_customer_group_main_id'), 'Should equal default customer group');",
                          "",
                          "    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.threshold).to.be.eq('1');",
                          "    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.max_quantity).to.be.eq('11');",
                          "    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0]._).to.be.eq('150');",
                          "    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.type).to.be.eq('fixed');",
                          "    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$, 'Should be a customer group tier price')",
                          "    .to.haveOwnProperty('customer_group_uid')",
                          "    .to.be.eq(pm.environment.get('gen_customer_group_main_id'), 'Should equal default customer group');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_items}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{catalog_product_advPrices_id}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SW: clone adv prices",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Product created\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Save product id for later use\", function () {\r",
                          "    const jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData.id).to.be.a('string').to.be.not.empty;\r",
                          "    pm.environment.set(\"gen_product_advPricesOne_id\", jsonData.id);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"overwrites\": {\r\n        \"name\" : \"API: Advanced Prices One\",\r\n        \"productNumber\" : \"SGDEMO10001\",\r\n        \"stock\": 500,\r\n        \"prices\": [\r\n            {\r\n                \"ruleId\": \"{{gen_rule_allValid_id}}\",\r\n                \"price\": [\r\n                    {\r\n                        \"currencyId\": \"{{system_default_currency_id}}\",\r\n                        \"net\": 721.29,\r\n                        \"gross\": 730,\r\n                        \"linked\": true,\r\n                        \"listPrice\": null,\r\n                        \"percentage\": null\r\n                    }\r\n                ],\r\n                \"quantityStart\": 1,\r\n                \"quantityEnd\": 5\r\n            }\r\n        ]\r\n    },\r\n    \"cloneChildren\": false\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "_action",
                        "clone",
                        "product",
                        "{{catalog_product_advPrices_id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SW: assing to channel",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Successfully added channel visibility to product\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {
                      "accept": true
                    }
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"productId\": \"{{gen_product_advPricesOne_id}}\",\r\n    \"salesChannelId\": \"{{gen_channel_headless_id}}\",\r\n    \"visibility\": 30\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/product-visibility",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "product-visibility"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SG: check tier prices",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Not an error\", function () {",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "const jsonObject = xml2Json(responseBody);",
                          "if (pm.globals.get('verbose')){",
                          "    console.log(jsonObject);",
                          "}",
                          "pm.test(\"Checking regular price options\", function () {",
                          "    pm.expect(jsonObject.items.item.prices.$, 'Price should have a type').to.haveOwnProperty('type').to.be.eq('gross',' Should be gross property set');",
                          "    pm.expect(jsonObject.items.item.prices.price).to.be.eq('950');",
                          "    pm.expect(jsonObject.items.item.prices.base_price).to.be.eq('Inhalt: 1'); //check translation ",
                          "});",
                          "",
                          "pm.test('Check tier prices', function() {",
                          "    const nonGroupTierPrice = jsonObject.items.item.prices.tier_prices.tier_price.find(price => !price.$.hasOwnProperty('customer_group_uid'));",
                          "    pm.expect(nonGroupTierPrice._).to.be.eq('220');",
                          "    pm.expect(nonGroupTierPrice.$.threshold).to.be.eq('1');",
                          "    pm.expect(nonGroupTierPrice.$.max_quantity).to.be.eq('5');",
                          "    pm.expect(nonGroupTierPrice.$.type).to.be.eq('fixed');",
                          "    pm.expect(nonGroupTierPrice.$, 'Should not be a customer group tier price').not.haveOwnProperty('customer_group_uid');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "X-Shopgate-Auth-User",
                        "value": "{{gen_sg_header_auth_user}}"
                      },
                      {
                        "key": "X-Shopgate-Auth-Token",
                        "value": "{{gen_sg_header_auth_token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "shop_number",
                          "value": "{{shop_number_headless}}",
                          "type": "text"
                        },
                        {
                          "key": "action",
                          "value": "{{framework_action_get_items}}",
                          "type": "text"
                        },
                        {
                          "key": "uids[0]",
                          "value": "{{gen_product_advPricesOne_id}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{domain}}",
                      "host": [
                        "{{domain}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Settings",
          "item": [
            {
              "name": "SG: get_settings (EN)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Check issues with payload\", function () {",
                      "    pm.expect(jsonData.error, 'SDK Error').to.eql(0);",
                      "    pm.expect(jsonData.customer_groups).to.be.a('array').to.be.length(2);",
                      "});",
                      "",
                      "pm.test(\"Check custom gross group\", function () {",
                      "    const nonDefaultGroup = findByName('A custom group');",
                      "    pm.expect(nonDefaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('created_customerGroup_gross_id'));",
                      "    pm.expect(nonDefaultGroup).to.haveOwnProperty('is_default').to.eq('0');",
                      "});",
                      "pm.test(\"Check default group\", function () {",
                      "    const defaultGroup = findByName('Standard customer group');",
                      "    pm.expect(defaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('gen_customer_group_main_id'));",
                      "    pm.expect(defaultGroup).to.haveOwnProperty('is_default').to.eq('1');",
                      "});",
                      "",
                      "function findByName(name) {",
                      "    return jsonData.customer_groups.find(group => group.name === name);",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_settings}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: get_settings (DE)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Check issues with payload\", function () {",
                      "    pm.expect(jsonData.error, 'SDK Error').to.eql(0);",
                      "    pm.expect(jsonData.customer_groups).to.be.a('array').to.be.length(2);",
                      "});",
                      "",
                      "// todo: fix needed in SGSW6-64",
                      "// pm.test(\"Check custom gross group\", function () {",
                      "//     const nonDefaultGroup = findByName('A custom group');",
                      "//     pm.expect(nonDefaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('created_customerGroup_gross_id'));",
                      "//     pm.expect(nonDefaultGroup).to.haveOwnProperty('is_default').to.eq('0');",
                      "// });",
                      "",
                      "pm.test(\"Check default group\", function () {",
                      "    const defaultGroup = findByName('Standard-Kundengruppe');",
                      "    pm.expect(defaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('gen_customer_group_main_id'));",
                      "    pm.expect(defaultGroup).to.haveOwnProperty('is_default').to.eq('1');",
                      "});",
                      "",
                      "function findByName(name) {",
                      "    return jsonData.customer_groups.find(group => group.name === name);",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number_headless}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_settings}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Cart",
          "item": [
            {
              "name": "SW: create out of stock product",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Product created\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Save product id for later use\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.be.a('string').to.be.not.empty;\r",
                      "    pm.environment.set(\"gen_product_stock_zero_id\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"overwrites\": {\r\n        \"name\" : \"API: check_cart One\",\r\n        \"productNumber\" : \"SGDEMOCHECKCART01\",\r\n        \"stock\": 0,\r\n        \"isCloseout\": true\r\n    },\r\n    \"cloneChildren\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "clone",
                    "product",
                    "{{catalog_product_advPrices_id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: create max purchse product",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Product created\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Save product id for later use\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.id).to.be.a('string').to.be.not.empty;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_maxPurchaseTen_id}}\",\r\n        \"name\" : \"API: max purchase 10\",\r\n        \"productNumber\" : \"SGDEMOCHECKCART02\",\r\n        \"stock\": 100,\r\n        \"maxPurchase\": 10\r\n    },\r\n    \"cloneChildren\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "clone",
                    "product",
                    "{{catalog_product_advPrices_id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: cart (main cust)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Check default customer group set for customer\", function () {",
                      "    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
                      "});",
                      "pm.test(\"Check shipping methods\", function () {",
                      "    pm.expect(jsonData.shipping_methods).length(2);",
                      "    jsonData.shipping_methods.map(method => {",
                      "        pm.expect(method.title).is.oneOf(['Standard', 'Express'], 'Should be Standard or Express.');",
                      "    });",
                      "});",
                      "pm.test(\"General item check\", function () {",
                      "    pm.expect(jsonData.items).length(4, 'Should be 4 items in cart');",
                      "});",
                      "pm.test(\"Check item success\", function () {",
                      "    const item = getItemById(pm.environment.get('catalog_product_advPrices_id'));",
                      "    pm.expect(item.is_buyable).to.eql(1);",
                      "    pm.expect(item.qty_buyable).to.eql(12);",
                      "    pm.expect(item.stock_quantity).to.eql(10);",
                      "    pm.expect(item.unit_amount).to.eql(630.25);",
                      "    pm.expect(item.unit_amount_with_tax).to.eql(750);",
                      "});",
                      "pm.test(\"Check item not found\", function () {",
                      "    const item = getItemById('1901dc5e888f4b1ea4168c2c5f005540');",
                      "    pm.expect(item.is_buyable).to.eql(0);",
                      "    pm.expect(item.error).to.eql(301);",
                      "});",
                      "pm.test(\"Check item out of stock\", function () {",
                      "    const item = getItemById(pm.environment.get('gen_product_stock_zero_id'));",
                      "    pm.expect(item.is_buyable).to.eql(0);",
                      "    pm.expect(item.error).to.eql(300);",
                      "});",
                      "pm.test(\"Check item max purchase\", function () {",
                      "    const item = getItemById(pm.environment.get('created_product_maxPurchaseTen_id'));",
                      "    pm.expect(item.is_buyable).to.eql(0);",
                      "    pm.expect(item.qty_buyable).to.eql(10);",
                      "    pm.expect(item.stock_quantity).to.eq(50);",
                      "    pm.expect(item.unit_amount).to.eql(672.27);",
                      "    pm.expect(item.unit_amount_with_tax).to.eql(800);",
                      "    pm.expect(item.error).to.eql(302);",
                      "});",
                      "",
                      "pm.test(\"Check basic coupon code\", function () {",
                      "    const coupon = jsonData.external_coupons[0];",
                      "    pm.expect(jsonData.external_coupons).length(1);",
                      "    pm.expect(coupon.is_valid).to.eq(1);",
                      "    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_byCode_code'));",
                      "    pm.expect(coupon.amount_net).to.eq(null);",
                      "    pm.expect(coupon.amount_gross).to.eq(2.25);",
                      "    pm.expect(coupon.name).to.eq('API: promo by code');",
                      "    pm.expect(coupon.currency).to.eq('EUR');",
                      "    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
                      "    const internalInfo = JSON.parse(coupon.internal_info);",
                      "    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
                      "    pm.expect(internalInfo.itemType).to.eq('coupon');",
                      "});",
                      "",
                      "function getItemById(id) {",
                      "    return jsonData.items.find(item => item.item_number === id);",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "action",
                      "value": "{{framework_action_check_cart}}",
                      "type": "text"
                    },
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_customer_id]",
                      "value": "{{customer_default_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[payment_group]",
                      "value": "COD",
                      "type": "text"
                    },
                    {
                      "key": "cart[payment_method]",
                      "value": "COD",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][gender]",
                      "value": "{{customer_default_gender}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][first_name]",
                      "value": "{{customer_default_firstName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][last_name]",
                      "value": "{{customer_default_lastName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][street_1]",
                      "value": "{{customer_default_street1}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][city]",
                      "value": "{{customer_default_city}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][zipcode]",
                      "value": "{{customer_default_zip}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][country]",
                      "value": "{{gen_customer_default_country_iso}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][gender]",
                      "value": "{{customer_default_gender}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][first_name]",
                      "value": "{{customer_default_firstName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][last_name]",
                      "value": "{{customer_default_lastName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][street_1]",
                      "value": "{{customer_default_street1}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][city]",
                      "value": "{{customer_default_city}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][zipcode]",
                      "value": "{{customer_default_zip}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][country]",
                      "value": "{{gen_customer_default_country_iso}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][item_number]",
                      "value": "{{catalog_product_advPrices_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][item_number_public]",
                      "value": "SWDEMO10002",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][quantity]",
                      "value": "12",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][unit_amount]",
                      "value": "630.25",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "cart[items][0][unit_amount_with_tax]",
                      "value": "750",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "cart[items][1][item_number]",
                      "value": "1901dc5e888f4b1ea4168c2c5f005540",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][item_number_public]",
                      "value": "SWDEMO10006",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][quantity]",
                      "value": "100",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][unit_amount]",
                      "value": "16.8067",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "cart[items][1][unit_amount_with_tax]",
                      "value": "20",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "cart[items][2][item_number]",
                      "value": "{{gen_product_stock_zero_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][2][item_number_public]",
                      "value": "SGDEMOCHECKCART01",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][2][quantity]",
                      "value": "50",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][2][unit_amount]",
                      "value": "1",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "cart[items][2][unit_amount_with_tax]",
                      "value": "1.19",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "cart[items][3][item_number]",
                      "value": "{{created_product_maxPurchaseTen_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][3][item_number_public]",
                      "value": "SGDEMOCHECKCART02",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][3][quantity]",
                      "value": "50",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][3][unit_amount]",
                      "value": "672.27",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "cart[items][3][unit_amount_with_tax]",
                      "value": "850",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "cart[external_coupons][0][code]",
                      "value": "{{created_promotion_byCode_code}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: cart (customGrp)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "if (pm.globals.get('verbose')) {",
                      "    console.log(jsonData);",
                      "}",
                      "",
                      "pm.test(\"Check default customer group set for customer\", function () {",
                      "    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_gross_id'));",
                      "});",
                      "pm.test(\"Check shipping methods\", function () {",
                      "    pm.expect(jsonData.shipping_methods).length(2);",
                      "    jsonData.shipping_methods.map(method => {",
                      "        pm.expect(method.title).is.oneOf(['Standard', 'Express'], 'Should be Standard or Express.');",
                      "    });",
                      "});",
                      "pm.test(\"General item check\", function () {",
                      "    pm.expect(jsonData.items).length(2, 'Should be 2 items in cart');",
                      "});",
                      "pm.test(\"Check item success\", function () {",
                      "    const item = getItemById(pm.environment.get('gen_product_advPricesOne_id'));",
                      "    pm.expect(item.is_buyable).to.eql(1);",
                      "    pm.expect(item.qty_buyable).to.eql(1);",
                      "    pm.expect(item.stock_quantity).to.eql(500);",
                      "    pm.expect(item.unit_amount).to.eql(721.29);",
                      "    pm.expect(item.unit_amount_with_tax).to.eql(858.34);",
                      "});",
                      "pm.test(\"Check item max purchase\", function () {",
                      "    const item = getItemById(pm.environment.get('created_product_maxPurchaseTen_id'));",
                      "    pm.expect(item.is_buyable).to.eql(0);",
                      "    pm.expect(item.qty_buyable).to.eql(10);",
                      "    pm.expect(item.stock_quantity).to.eq(50);",
                      "    pm.expect(item.error).to.eql(302);",
                      "    pm.expect(item.unit_amount).to.eql(798.32);",
                      "    pm.expect(item.unit_amount_with_tax).to.eql(950);",
                      "});",
                      "",
                      "function getItemById(id) {",
                      "    return jsonData.items.find(item => item.item_number === id);",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "action",
                      "value": "{{framework_action_check_cart}}",
                      "type": "text"
                    },
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_customer_id]",
                      "value": "{{created_customer_withCustomGrp_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[payment_group]",
                      "value": "COD",
                      "type": "text"
                    },
                    {
                      "key": "cart[payment_method]",
                      "value": "COD",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][gender]",
                      "value": "{{customer_default_gender}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][first_name]",
                      "value": "{{customer_default_firstName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][last_name]",
                      "value": "{{customer_default_lastName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][street_1]",
                      "value": "{{customer_default_street1}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][city]",
                      "value": "{{customer_default_city}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][zipcode]",
                      "value": "{{customer_default_zip}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][country]",
                      "value": "{{gen_customer_default_country_iso}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][gender]",
                      "value": "{{customer_default_gender}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][first_name]",
                      "value": "{{customer_default_firstName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][last_name]",
                      "value": "{{customer_default_lastName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][street_1]",
                      "value": "{{customer_default_street1}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][city]",
                      "value": "{{customer_default_city}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][zipcode]",
                      "value": "{{customer_default_zip}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][country]",
                      "value": "{{gen_customer_default_country_iso}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][item_number]",
                      "value": "{{gen_product_advPricesOne_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][item_number_public]",
                      "value": "SWDEMO10002",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][quantity]",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][unit_amount]",
                      "value": "721.29",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][unit_amount_with_tax]",
                      "value": "858.34",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][item_number]",
                      "value": "{{created_product_maxPurchaseTen_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][item_number_public]",
                      "value": "SGDEMOCHECKCART02",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][quantity]",
                      "value": "50",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][unit_amount]",
                      "value": "798.32",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][unit_amount_with_tax]",
                      "value": "950",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][tax_percent]",
                      "value": "19.00",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][1][currency]",
                      "value": "EUR",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: cart USA ship promo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Check default customer group set for customer\", function () {",
                      "    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
                      "});",
                      "pm.test(\"Check shipping methods\", function () {",
                      "    pm.expect(jsonData.shipping_methods).length(2);",
                      "    jsonData.shipping_methods.map(method => {",
                      "        pm.expect(method.title).is.oneOf(['Standard', 'Express'], 'Should be Standard or Express.');",
                      "    });",
                      "});",
                      "pm.test(\"General item check\", function () {",
                      "    pm.expect(jsonData.items).length(1, 'Should be 4 items in cart');",
                      "});",
                      "pm.test(\"Check item success\", function () {",
                      "    const item = getItemById(pm.environment.get('catalog_product_advPrices_id'));",
                      "    pm.expect(item.is_buyable).to.eql(1);",
                      "    pm.expect(item.qty_buyable).to.eql(1);",
                      "    pm.expect(item.stock_quantity).to.eql(10);",
                      "    pm.expect(item.unit_amount).to.eql(672.27);",
                      "    pm.expect(item.unit_amount_with_tax).to.eql(800);",
                      "});",
                      "",
                      "pm.test(\"Check USA customer auto rule is handled\", function () {",
                      "    const coupon = getByName(jsonData.external_coupons, 'API: promo by Billing Country USA');",
                      "    pm.expect(jsonData.external_coupons).length(2);",
                      "    pm.expect(coupon.is_valid).to.eq(1);",
                      "    pm.expect(coupon.not_valid_message).to.eq(null);",
                      "    pm.expect(coupon.code).to.be.a('string').to.eq(pm.environment.get('created_discount_customerUSA_cart_1_id'));",
                      "    pm.expect(coupon.amount_net).to.eq(67.23);",
                      "    pm.expect(coupon.amount_gross).to.eq(80);",
                      "    pm.expect(coupon.name).to.eq('API: promo by Billing Country USA');",
                      "    pm.expect(coupon.currency).to.eq('EUR');",
                      "    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
                      "    const internalInfo = JSON.parse(coupon.internal_info);",
                      "    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_customerUSA_id'));",
                      "    pm.expect(internalInfo.itemType).to.eq('cartRule');",
                      "});",
                      "",
                      "pm.test(\"Check not valid coupon\", function () {",
                      "    const coupon = getByName(jsonData.external_coupons, 'Not valid coupon');",
                      "    pm.expect(coupon.is_valid).to.eq(false);",
                      "    pm.expect(coupon.not_valid_message).to.eq('Promotion with code NOT-VALID not found!');",
                      "    pm.expect(coupon.code).to.eq('NOT-VALID');",
                      "    pm.expect(coupon.amount_net).to.eq(1.0);",
                      "    pm.expect(coupon.amount_gross).to.eq(1.5);",
                      "    pm.expect(coupon.name).to.eq('Not valid coupon');",
                      "    pm.expect(coupon.currency).to.eq('EUR');",
                      "    pm.expect(coupon.internal_info, 'Internal info should be empty').to.be.eq('[]');",
                      "});",
                      "",
                      "function getItemById(id) {",
                      "    return jsonData.items.find(item => item.item_number === id);",
                      "};",
                      "function getByName(list, name) {",
                      "    return list.find(item => item.name === name);",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "action",
                      "value": "{{framework_action_check_cart}}",
                      "type": "text"
                    },
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_customer_id]",
                      "value": "{{customer_default_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[payment_group]",
                      "value": "COD",
                      "type": "text"
                    },
                    {
                      "key": "cart[payment_method]",
                      "value": "COD",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][gender]",
                      "value": "{{customer_default_gender}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][first_name]",
                      "value": "{{customer_default_firstName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][last_name]",
                      "value": "{{customer_default_lastName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][street_1]",
                      "value": "{{customer_default_street1}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][city]",
                      "value": "Phoenix",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][zipcode]",
                      "value": "{{customer_default_zip}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][country]",
                      "value": "US",
                      "type": "text"
                    },
                    {
                      "key": "cart[invoice_address][state]",
                      "value": "US-AZ",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][gender]",
                      "value": "{{customer_default_gender}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][first_name]",
                      "value": "{{customer_default_firstName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][last_name]",
                      "value": "{{customer_default_lastName}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][street_1]",
                      "value": "{{customer_default_street1}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][city]",
                      "value": "{{customer_default_city}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][zipcode]",
                      "value": "{{customer_default_zip}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[delivery_address][country]",
                      "value": "{{gen_customer_default_country_iso}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][item_number]",
                      "value": "{{catalog_product_advPrices_id}}",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][item_number_public]",
                      "value": "SWDEMO10002",
                      "type": "text"
                    },
                    {
                      "key": "cart[items][0][quantity]",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][0][is_valid]",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][0][code]",
                      "value": "NOT-VALID",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][0][name]",
                      "value": "Not valid coupon",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][0][amount_net]",
                      "value": "1.0",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][0][amount_gross]",
                      "value": "1.5",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][0][tax_type]",
                      "value": "auto",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][0][currency]",
                      "value": "EUR",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][1][is_valid]",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][1][code]",
                      "value": "{{created_discount_customerUSA_cart_1_id}}",
                      "description": "test non-coupon properly handled",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][1][name]",
                      "value": "Perfectly valid rule",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][1][amount_net]",
                      "value": "2.0",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][1][amount_gross]",
                      "value": "2.5",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][1][tax_type]",
                      "value": "auto",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][1][currency]",
                      "value": "EUR",
                      "type": "text"
                    },
                    {
                      "key": "cart[external_coupons][1][internal_info]",
                      "value": "{\"itemType\":\"cartRule\",\"promotionId\":\"3e226aa33c486a291338478679382ab1\",\"discountId\":\"9c9b73c4076e2d8d2926c827598089cb\"}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Review",
          "item": [
            {
              "name": "SW: create reviews",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successfully created all SG system config entities\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "accept": true
                }
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"product_review\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n             {\r\n                \"id\": \"{{product_review_disabled_id}}\",\r\n                \"productId\": \"{{catalog_product_disabled}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{system_default_language}}\",\r\n                \"title\": \"{{$randomLoremWords}}\",\r\n                \"content\": \"{{$randomLoremSentence}}\",\r\n                \"points\": \"2\",\r\n                \"status\": true\r\n            },\r\n            {\r\n                \"id\": \"{{product_review_props_id}}\",\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{system_default_language}}\",\r\n                \"title\": \"Main product review\",\r\n                \"content\": \"Main product long content\",\r\n                \"points\": 4.4,\r\n                \"status\": true\r\n            },\r\n            {\r\n                \"id\": \"{{product_review_child_id}}\",\r\n                \"productId\": \"{{gen_product_variant_child_id}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{gen_non_default_lang}}\",\r\n                \"title\": \"German Title\",\r\n                \"content\": \"German Content\",\r\n                \"points\": 3.7,\r\n                \"status\": true\r\n            },\r\n            {\r\n                \"id\": \"{{product_review_freeShip_id}}\",\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"salesChannelId\": \"{{gen_channel_headless_id}}\",\r\n                \"languageId\": \"{{gen_non_default_lang}}\",\r\n                \"title\": \"Secondary channel review\",\r\n                \"content\": \"German Content too\",\r\n                \"points\": 1.1,\r\n                \"status\": true\r\n            },\r\n            {\r\n                \"id\": \"{{product_review_freeShip_disabled_id}}\",\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{gen_non_default_lang}}\",\r\n                \"title\": \"Disabled review\",\r\n                \"content\": \"Not approved by merchant\",\r\n                \"points\": 3,\r\n                \"status\": false,\r\n                \"customerId\": \"{{customer_default_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{product_review_props_customer_id}}\",\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"salesChannelId\": \"{{gen_channel_headless_id}}\",\r\n                \"languageId\": \"{{system_default_language}}\",\r\n                \"title\": \"Customer attached review\",\r\n                \"content\": \"Customer attached review description\",\r\n                \"points\": 10,\r\n                \"status\": true,\r\n                \"customerId\": \"{{customer_default_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/sync",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "sync"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: reviews (main)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const moment = require('moment');",
                      "const now = moment().format('YYYY-MM-DD');",
                      "",
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"have reviews\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "    if (pm.globals.get('verbose')){",
                      "        console.log(jsonObject);",
                      "    }",
                      "",
                      "    pm.expect(jsonObject.reviews.review).length(3, 'Expecting only 3 reviews');",
                      "    pm.expect(jsonObject.reviews.review[0].$.uid).to.eq(pm.environment.get('product_review_child_id'));",
                      "    pm.expect(jsonObject.reviews.review[0]).to.have.property('item_uid').to.eq(pm.environment.get('gen_product_variant_child_id'));",
                      "    pm.expect(jsonObject.reviews.review[0].score).to.eq('4');",
                      "    pm.expect(jsonObject.reviews.review[0].reviewer_name).to.eq('*****');",
                      "    pm.expect(jsonObject.reviews.review[0].title).to.eq('German Title');",
                      "    pm.expect(jsonObject.reviews.review[0].text).to.eq('German Content');",
                      "    pm.expect(jsonObject.reviews.review[0]).to.haveOwnProperty('date').to.eq(now);",
                      "",
                      "    pm.expect(jsonObject.reviews.review[1].$.uid).to.eq(pm.environment.get('product_review_props_id'));",
                      "    pm.expect(jsonObject.reviews.review[1]).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_props'));",
                      "    pm.expect(jsonObject.reviews.review[1].score).to.eq('4');",
                      "    pm.expect(jsonObject.reviews.review[1].title).to.eq('Main product review');",
                      "    pm.expect(jsonObject.reviews.review[1].reviewer_name).to.eq('*****');",
                      "    pm.expect(jsonObject.reviews.review[1].text).to.eq('Main product long content');",
                      "    pm.expect(jsonObject.reviews.review[1]).to.haveOwnProperty('date').to.eq(now);",
                      "",
                      "    pm.expect(jsonObject.reviews.review[2].$.uid).to.eq(pm.environment.get('product_review_disabled_id'));",
                      "    pm.expect(jsonObject.reviews.review[2]).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_disabled'));",
                      "    pm.expect(jsonObject.reviews.review[2].score).to.eq('2');",
                      "    pm.expect(jsonObject.reviews.review[2].reviewer_name).to.eq('*****');",
                      "    pm.expect(jsonObject.reviews.review[2].title).to.be.a('string').to.not.be.empty;",
                      "    pm.expect(jsonObject.reviews.review[2].text).to.be.a('string').to.not.be.empty;",
                      "    pm.expect(jsonObject.reviews.review[2]).to.haveOwnProperty('date').to.eq(now);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_reviews}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: reviews (headless)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const moment = require('moment');",
                      "const now = moment().format('YYYY-MM-DD');",
                      "",
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"have reviews\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "    if (pm.globals.get('verbose')){",
                      "        console.log(jsonObject);",
                      "    }",
                      "    ",
                      "    pm.expect(jsonObject.reviews.review).length(2, 'Expecting only 2 reviews');",
                      "    pm.expect(jsonObject.reviews.review[0].$.uid).to.eq(pm.environment.get('product_review_props_customer_id'));",
                      "    pm.expect(jsonObject.reviews.review[0]).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_props'));",
                      "    pm.expect(jsonObject.reviews.review[0].score).to.eq('10');",
                      "    pm.expect(jsonObject.reviews.review[0].reviewer_name).to.eq('Max M.');",
                      "    pm.expect(jsonObject.reviews.review[0].title).to.eq('Customer attached review');",
                      "    pm.expect(jsonObject.reviews.review[0].text).to.eq('Customer attached review description');",
                      "    pm.expect(jsonObject.reviews.review[0]).to.haveOwnProperty('date').to.eq(now);",
                      "",
                      "    pm.expect(jsonObject.reviews.review[1].$.uid).to.eq(pm.environment.get('product_review_freeShip_id'));",
                      "    pm.expect(jsonObject.reviews.review[1]).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_freeShip'));",
                      "    pm.expect(jsonObject.reviews.review[1].score).to.eq('1');",
                      "    pm.expect(jsonObject.reviews.review[1].reviewer_name).to.eq('*****');",
                      "    pm.expect(jsonObject.reviews.review[1].title).to.eq('Secondary channel review');",
                      "    pm.expect(jsonObject.reviews.review[1].text).to.eq('German Content too');",
                      "    pm.expect(jsonObject.reviews.review[1]).to.haveOwnProperty('date').to.eq(now);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number_headless}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_reviews}}",
                      "type": "text"
                    },
                    {
                      "key": "limit",
                      "value": "5",
                      "type": "text"
                    },
                    {
                      "key": "offset",
                      "value": "0",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: reviews (uids main)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const moment = require('moment');",
                      "const now = moment().format('YYYY-MM-DD');",
                      "",
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"have reviews\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "    if (pm.globals.get('verbose')){",
                      "        console.log(jsonObject);",
                      "    }",
                      "",
                      "    pm.expect(jsonObject.reviews.review).length(2, 'Expecting only 2 reviews');",
                      "    pm.expect(jsonObject.reviews.review[0].$.uid).to.eq(pm.environment.get('product_review_disabled_id'));",
                      "    pm.expect(jsonObject.reviews.review[1].$.uid).to.eq(pm.environment.get('product_review_child_id'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_reviews}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[0]",
                      "value": "{{product_review_disabled_id}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[1]",
                      "value": "{{product_review_freeShip_id}}",
                      "description": "wrong salesChannel",
                      "type": "text"
                    },
                    {
                      "key": "uids[2]",
                      "value": "{{product_review_freeShip_disabled_id}}",
                      "description": "disabled review + wrong salesChannel",
                      "type": "text"
                    },
                    {
                      "key": "uids[3]",
                      "value": "{{product_review_freeShip_id}}",
                      "description": "wrong salesChannel",
                      "type": "text"
                    },
                    {
                      "key": "uids[4]",
                      "value": "{{product_review_child_id}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: reviews (uids head)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const moment = require('moment');",
                      "const now = moment().format('YYYY-MM-DD');",
                      "",
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"have reviews\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "    if (pm.globals.get('verbose')){",
                      "        console.log(jsonObject);",
                      "    }",
                      "",
                      "    pm.expect(jsonObject.reviews.review).length(2, 'Expecting only 2 reviews');",
                      "    pm.expect(jsonObject.reviews.review[0].$.uid).to.eq(pm.environment.get('product_review_freeShip_id'));",
                      "    pm.expect(jsonObject.reviews.review[1].$.uid).to.eq(pm.environment.get('product_review_props_customer_id'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number_headless}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_reviews}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[0]",
                      "value": "{{product_review_freeShip_id}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[1]",
                      "value": "{{product_review_props_customer_id}}",
                      "type": "text"
                    },
                    {
                      "key": "uids[2]",
                      "value": "{{product_review_freeShip_disabled_id}}",
                      "description": "disabled review wont export",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: reviews (limit)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const moment = require('moment');",
                      "const now = moment().format('YYYY-MM-DD');",
                      "",
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"have reviews\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "    if (pm.globals.get('verbose')){",
                      "        console.log(jsonObject);",
                      "    }",
                      "",
                      "    pm.expect(jsonObject.reviews.review).length(2, 'Expecting only 2 reviews');",
                      "    pm.expect(jsonObject.reviews.review[0].$.uid).to.eq(pm.environment.get('product_review_child_id'));",
                      "    pm.expect(jsonObject.reviews.review[0]).to.have.property('item_uid').to.eq(pm.environment.get('gen_product_variant_child_id'));",
                      "    pm.expect(jsonObject.reviews.review[0].score).to.eq('4');",
                      "    pm.expect(jsonObject.reviews.review[0].reviewer_name).to.eq('*****');",
                      "    pm.expect(jsonObject.reviews.review[0].title).to.eq('German Title');",
                      "    pm.expect(jsonObject.reviews.review[0].text).to.eq('German Content');",
                      "    pm.expect(jsonObject.reviews.review[0]).to.haveOwnProperty('date').to.eq(now);",
                      "",
                      "    pm.expect(jsonObject.reviews.review[1].$.uid).to.eq(pm.environment.get('product_review_props_id'));",
                      "    pm.expect(jsonObject.reviews.review[1]).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_props'));",
                      "    pm.expect(jsonObject.reviews.review[1].score).to.eq('4');",
                      "    pm.expect(jsonObject.reviews.review[1].title).to.eq('Main product review');",
                      "    pm.expect(jsonObject.reviews.review[1].reviewer_name).to.eq('*****');",
                      "    pm.expect(jsonObject.reviews.review[1].text).to.eq('Main product long content');",
                      "    pm.expect(jsonObject.reviews.review[1]).to.haveOwnProperty('date').to.eq(now);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_reviews}}",
                      "type": "text"
                    },
                    {
                      "key": "limit",
                      "value": "2",
                      "type": "text"
                    },
                    {
                      "key": "offset",
                      "value": "0",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: reviews (offset)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const moment = require('moment');",
                      "const now = moment().format('YYYY-MM-DD');",
                      "",
                      "pm.test(\"Not an error\", function () {",
                      "    pm.response.to.not.have.jsonBody('error');",
                      "});",
                      "",
                      "pm.test(\"have reviews\", function () {",
                      "    const jsonObject = xml2Json(responseBody);",
                      "    if (pm.globals.get('verbose')){",
                      "        console.log(jsonObject);",
                      "    }",
                      "",
                      "    pm.expect(jsonObject.reviews.review.$.uid).to.eq(pm.environment.get('product_review_disabled_id'));",
                      "    pm.expect(jsonObject.reviews.review).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_disabled'));",
                      "    pm.expect(jsonObject.reviews.review.score).to.eq('2');",
                      "    pm.expect(jsonObject.reviews.review.reviewer_name).to.eq('*****');",
                      "    pm.expect(jsonObject.reviews.review.title).to.be.a('string').to.not.be.empty;",
                      "    pm.expect(jsonObject.reviews.review.text).to.be.a('string').to.not.be.empty;",
                      "    pm.expect(jsonObject.reviews.review).to.haveOwnProperty('date').to.eq(now);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_reviews}}",
                      "type": "text"
                    },
                    {
                      "key": "limit",
                      "value": "2",
                      "type": "text"
                    },
                    {
                      "key": "offset",
                      "value": "2",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Order",
          "item": [
            {
              "name": "SG: addOrder (promos)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Order added properly\", function () {",
                      "    if (pm.globals.get('verbose')) {",
                      "        console.log(jsonData);",
                      "    }",
                      "",
                      "    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
                      "    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
                      "    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
                      "});",
                      "",
                      "const order_number = getValue(pm.request.body.formdata, 'order_number');",
                      "pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
                      "",
                      "function getValue(data, incomingKey) {",
                      "    const found = data.find(function({key}) {",
                      "        return key === incomingKey;",
                      "    });",
                      "    return found && found.hasOwnProperty('value') ? found.value : null;",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_add_order}}",
                      "type": "text"
                    },
                    {
                      "key": "order_number",
                      "value": "0003",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: get last order",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Not an error\", function () {",
                      "    pm.expect(jsonData.error).to.eq(0);",
                      "    pm.expect(jsonData.orders).to.be.length(1);",
                      "});",
                      "",
                      "const order = jsonData.orders[0];",
                      "pm.test(\"Basic order data\", function () {",
                      "    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_0003_id'));",
                      "    pm.expect(order.status_name).to.eq('Open');",
                      "    pm.expect(order.mail).to.eq(pm.environment.get('userEmail'));",
                      "    pm.expect(order.phone).to.eq('+1-111-111-1111');",
                      "    pm.expect(order.currency).to.eq('EUR');",
                      "    pm.expect(order.is_paid).to.eq(0);",
                      "    pm.expect(order.payment_method).to.eq('Vorkasse (Eigene Abwicklung)');",
                      "    pm.expect(order.payment_time).to.eq('2022-01-20T11:14:03+00:00');",
                      "    pm.expect(order.is_shipping_completed).to.eq(0);",
                      "});",
                      "",
                      "pm.test(\"Custom Fields\", function () {",
                      "    pm.expect(order.custom_fields).to.be.length(1);",
                      "    const field = order.custom_fields[0];",
                      "    pm.expect(field.label).to.eq('customerComment');",
                      "    pm.expect(field.internal_field_name).to.eq('customerComment');",
                      "    pm.expect(field.value).to.eq('My order comment');",
                      "});",
                      "",
                      "pm.test(\"Billing Address check\", function () {",
                      "    const address = order.invoice_address;",
                      "    pm.expect(address.is_invoice_address).to.eq(1);",
                      "    pm.expect(address.is_delivery_address).to.eq(0);",
                      "    pm.expect(address.first_name).to.eq('First Name');",
                      "    pm.expect(address.last_name).to.eq('Last Name');",
                      "    pm.expect(address.gender).to.eq('f');",
                      "    pm.expect(address.birthday).to.eq(null);",
                      "    pm.expect(address.company).to.eq('My Company 1');",
                      "    pm.expect(address.street_1).to.eq('My Street 1 A');",
                      "    pm.expect(address.street_2).to.eq('My Street 2 A');",
                      "    pm.expect(address.zipcode).to.eq('27404');",
                      "    pm.expect(address.city).to.eq('Phoenix');",
                      "    pm.expect(address.country).to.eq('US');",
                      "    pm.expect(address.state).to.eq('US-AZ');",
                      "    pm.expect(address.phone).to.eq('+1-111-111-1111');",
                      "});",
                      "",
                      "pm.test(\"Shipping Address check\", function () {",
                      "    const address = order.delivery_address;",
                      "    pm.expect(address.is_invoice_address).to.eq(0);",
                      "    pm.expect(address.is_delivery_address).to.eq(1);",
                      "    pm.expect(address.first_name).to.eq('Bank');",
                      "    pm.expect(address.last_name).to.eq('Payment');",
                      "    pm.expect(address.gender).to.eq('m');",
                      "    pm.expect(address.birthday).to.eq(null);",
                      "    pm.expect(address.company).to.eq('My Company 2');",
                      "    pm.expect(address.street_1).to.eq('My Street 1 B');",
                      "    pm.expect(address.street_2).to.eq('My Street 2 B');",
                      "    pm.expect(address.zipcode).to.eq('27404');",
                      "    pm.expect(address.city).to.eq('Frankenbostel');",
                      "    pm.expect(address.country).to.eq('GB');",
                      "    pm.expect(address.state).to.eq('GB-ABC');",
                      "    pm.expect(address.phone).to.eq('+2-111-111-1111');",
                      "});",
                      "",
                      "pm.test(\"Delivery notes\", function () {",
                      "    pm.expect(order.delivery_notes).to.be.length(1);",
                      "    const note = order.delivery_notes[0];",
                      "    pm.expect(note.shipping_service_id).to.eq('DHL Pakte gogreen');",
                      "    pm.expect(note.shipping_service_name).to.eq('');",
                      "    pm.expect(note.tracking_number).to.eq('');",
                      "    pm.expect(note.shipping_time).to.eq(null);",
                      "});",
                      "",
                      "pm.test(\"Taxes\", function () {",
                      "    pm.expect(order.order_taxes).to.be.length(1);",
                      "    const tax = order.order_taxes[0];",
                      "    pm.expect(tax.label).to.eq('plus 20% VAT');",
                      "    pm.expect(tax.tax_percent).to.eq(20);",
                      "    pm.expect(tax.amount).to.eq(78.08);",
                      "});",
                      "",
                      "pm.test(\"Promotion by code check\", function () {",
                      "    pm.expect(order.external_coupons).to.be.length(4);",
                      "    const coupon = getItemByName(order.external_coupons, 'API: promo by code');",
                      "    pm.expect(coupon, 'Could not locate coupon by code').to.not.be.undefined;",
                      "    pm.expect(coupon.is_valid).to.eq(1);",
                      "    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_byCode_code'));",
                      "    pm.expect(coupon.name).to.eq('API: promo by code');",
                      "    pm.expect(coupon.amount_net).to.eq(1.87);",
                      "    pm.expect(coupon.amount_gross).to.eq(2.25);",
                      "    pm.expect(coupon.tax_type).to.eq('auto');",
                      "    pm.expect(coupon.currency).to.eq('EUR');",
                      "    pm.expect(coupon.is_free_shipping).to.eq(null);",
                      "    const internalInfo = JSON.parse(coupon.internal_info);",
                      "    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
                      "    pm.expect(internalInfo.itemType).to.eq('coupon');",
                      "    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
                      "});",
                      "pm.test(\"Auto Promo 10% discount check\", function () {",
                      "    const promoDiscount = getItemByName(order.external_coupons, 'API: promo by Billing Country USA');",
                      "    pm.expect(promoDiscount, 'Could not locate 10% promo discount').to.not.be.undefined;",
                      "    pm.expect(promoDiscount.code).to.not.be.null;",
                      "    pm.expect(promoDiscount.name).to.eq('API: promo by Billing Country USA');",
                      "    pm.expect(promoDiscount.amount_net).to.eq(43.37);",
                      "    pm.expect(promoDiscount.amount_gross).to.eq(52.05);",
                      "    pm.expect(promoDiscount.tax_type).to.eq('auto');",
                      "    pm.expect(promoDiscount.currency).to.eq('EUR');",
                      "    pm.expect(promoDiscount.is_free_shipping).to.eq(null);",
                      "    const internalInfo = JSON.parse(promoDiscount.internal_info);",
                      "    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_customerUSA_id'));",
                      "    pm.expect(internalInfo.itemType).to.eq('cartRule');",
                      "    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_customerUSA_id'));",
                      "    pm.expect(internalInfo.discountId).to.eq(pm.environment.get('created_discount_customerUSA_cart_1_id'));",
                      "});",
                      "    ",
                      "pm.test(\"Shipping discount 1 check\", function () {",
                      "    const shippingDiscount = getItemByName(order.external_coupons, 'discount shipping costs 1');",
                      "    pm.expect(shippingDiscount, 'Could not loate shipping discount').to.not.be.undefined;",
                      "    pm.expect(shippingDiscount.code).to.eq('1');",
                      "    pm.expect(shippingDiscount.name).to.eq('discount shipping costs 1');",
                      "    pm.expect(shippingDiscount.amount_net).to.eq(0.83);",
                      "    pm.expect(shippingDiscount.amount_gross).to.eq(1.0);",
                      "    pm.expect(shippingDiscount.tax_type).to.eq('auto');",
                      "    pm.expect(shippingDiscount.currency).to.eq('EUR');",
                      "    pm.expect(shippingDiscount.is_free_shipping).to.eq(null);",
                      "});",
                      "",
                      "pm.test(\"Shipping discount 2 check\", function () {",
                      "    const shippingDiscount = getItemByName(order.external_coupons, 'discount shipping costs 2');",
                      "    pm.expect(shippingDiscount, 'Could not loate shipping discount').to.not.be.undefined;",
                      "    pm.expect(shippingDiscount.code).to.eq('2');",
                      "    pm.expect(shippingDiscount.name).to.eq('discount shipping costs 2');",
                      "    pm.expect(shippingDiscount.amount_net).to.eq(1.25);",
                      "    pm.expect(shippingDiscount.amount_gross).to.eq(1.5);",
                      "    pm.expect(shippingDiscount.tax_type).to.eq('auto');",
                      "    pm.expect(shippingDiscount.currency).to.eq('EUR');",
                      "    pm.expect(shippingDiscount.is_free_shipping).to.eq(null);",
                      "});",
                      "",
                      "pm.test(\"Item check\", function () {",
                      "    pm.expect(order.items).to.be.length(2);",
                      "    const product = getItemByName(order.items, 'Main product');",
                      "    pm.expect(product, 'Could not find main product').to.not.be.undefined;",
                      "    pm.expect(product.item_number).to.eq(pm.environment.get('catalog_product_main_id'));",
                      "    pm.expect(product.item_number_public).to.eq('SWDEMO10001');",
                      "    pm.expect(product.quantity).to.eq(1);",
                      "    pm.expect(product.unit_amount).to.eq(413.29);",
                      "    pm.expect(product.unit_amount_with_tax).to.eq(495.95);",
                      "    pm.expect(product.tax_percent).to.eq(20);",
                      "    pm.expect(product.currency).to.eq('EUR');",
                      "    pm.expect(product.description).to.not.be.empty;",
                      "    const variantChild = getItemByName(order.items, 'API: Variant Child (Red-M)');",
                      "    pm.expect(variantChild, 'Could not find variant child').to.not.be.undefined;",
                      "    pm.expect(variantChild.item_number_public).to.eq('SG.DEMO.CHILD.1');",
                      "    pm.expect(variantChild.item_number).to.eq(pm.environment.get('created_product_variant_child_id'));",
                      "    pm.expect(variantChild.quantity).to.eq(1);",
                      "    pm.expect(variantChild.unit_amount).to.eq(20.42);",
                      "    pm.expect(variantChild.unit_amount_with_tax).to.eq(24.5);",
                      "    pm.expect(variantChild.tax_percent).to.eq(20);",
                      "    pm.expect(variantChild.currency).to.eq('EUR');",
                      "    pm.expect(variantChild.description).to.be.null;",
                      "});",
                      "",
                      "pm.test(\"Shipping extra cost check\", function () {",
                      "    pm.expect(order.extra_costs).to.be.length(1);",
                      "    const extraCost = order.extra_costs[0];",
                      "    pm.expect(extraCost.type).to.eq('shipping');",
                      "    pm.expect(extraCost.tax_percent).to.eq(20);",
                      "    pm.expect(extraCost.amount).to.eq(4.9);",
                      "    pm.expect(extraCost.label).to.eq('plus shipping costs');",
                      "});",
                      "",
                      "function getItemByName(list, name) {",
                      "    return list.find(item => item.name === name);",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_orders}}",
                      "type": "text"
                    },
                    {
                      "key": "customer_token",
                      "value": "{{customer_default_id}}",
                      "type": "text"
                    },
                    {
                      "key": "limit",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "offset",
                      "value": "0",
                      "type": "text"
                    },
                    {
                      "key": "customer_language",
                      "value": "",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: get deliveryId",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Your test name\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.total).to.eql(1);\r",
                      "    const delivery = jsonData.data[0];\r",
                      "    pm.expect(delivery.trackingCodes, 'Tracking codes should be empty').to.be.a('array').to.be.length(0);\r",
                      "    pm.environment.set(\"gen_order_0003_delivery_id\", delivery.id);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"multi\", \r\n            \"operator\": \"and\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"orderId\",\r\n                    \"value\": \"{{gen_order_0003_id}}\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"shippingCosts.unitPrice\",\r\n                    \"value\": 4.9\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/order-delivery",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "order-delivery"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: ship order",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Your test name\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.technicalName).to.eql('shipped');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"sendMail\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/order_delivery/{{gen_order_0003_delivery_id}}/state/ship",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "order_delivery",
                    "{{gen_order_0003_delivery_id}}",
                    "state",
                    "ship"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: set tracking codes",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"trackingCodes\": [\"test-code-1\", \"test-code-2\"]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/order/{{gen_order_0003_id}}/deliveries/{{gen_order_0003_delivery_id}}",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "order",
                    "{{gen_order_0003_id}}",
                    "deliveries",
                    "{{gen_order_0003_delivery_id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SG: check delivery",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const moment = require('moment');",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Not an error\", function () {",
                      "    pm.expect(jsonData.error).to.eq(0);",
                      "    pm.expect(jsonData.orders).to.be.length(1);",
                      "});",
                      "",
                      "const order = jsonData.orders[0];",
                      "pm.test(\"Basic order data\", function () {",
                      "    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_0003_id'));",
                      "    pm.expect(order.status_name).to.eq('Open');",
                      "});",
                      "",
                      "pm.test(\"Delivery notes\", function () {",
                      "    pm.expect(order.delivery_notes).to.be.length(1);",
                      "    const note = order.delivery_notes[0];",
                      "    pm.expect(note.shipping_service_id).to.eq('DHL Pakte gogreen');",
                      "    pm.expect(note.shipping_service_name).to.eq('');",
                      "    pm.expect(note.tracking_number).to.eq('test-code-1, test-code-2');",
                      "    pm.expect(note.shipping_time).to.be.a('string').to.not.be.empty;",
                      "    const time = moment(note.shipping_time);",
                      "    pm.expect(time.isValid()).to.eq(true);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "X-Shopgate-Auth-User",
                    "value": "{{gen_sg_header_auth_user}}"
                  },
                  {
                    "key": "X-Shopgate-Auth-Token",
                    "value": "{{gen_sg_header_auth_token}}"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "shop_number",
                      "value": "{{shop_number}}",
                      "type": "text"
                    },
                    {
                      "key": "action",
                      "value": "{{framework_action_get_orders}}",
                      "type": "text"
                    },
                    {
                      "key": "customer_token",
                      "value": "{{customer_default_id}}",
                      "type": "text"
                    },
                    {
                      "key": "limit",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "offset",
                      "value": "0",
                      "type": "text"
                    },
                    {
                      "key": "customer_language",
                      "value": "",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{domain}}",
                  "host": [
                    "{{domain}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "SG: ping",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Ping Pong\", function () {",
                  "    pm.expect(jsonData.pong).to.eql('OK');",
                  "});",
                  "",
                  "pm.test('Plugin Versions', function () {",
                  "    pm.expect(jsonData.plugin_version).to.be.a('string').to.be.eq(pm.environment.get(\"gen_plugin_version\"));",
                  "    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
                  "    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Check Configuration settings', function () {",
                  "    pm.expect(jsonData.configuration.server).to.be.eq('live');",
                  "    pm.expect(jsonData.configuration.api_url).to.be.eq('https://api.shopgate.com/merchant/');",
                  "    pm.expect(jsonData.configuration.enable_set_settings).to.be.eq(1);",
                  "});",
                  "",
                  "pm.test(\"Check log paths\", function () {",
                  "    const shopNumber = pm.environment.get('shop_number');",
                  "    pm.expect(jsonData.configuration.export_folder_path).to.have.string('shopgate/' + shopNumber);",
                  "    pm.expect(jsonData.configuration.log_folder_path).to.have.string('shopgate/' + shopNumber);",
                  "    pm.expect(jsonData.configuration.cache_folder_path).to.have.string('shopgate/' + shopNumber);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_ping}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: ping (Headless)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Ping Pong\", function () {",
                  "    pm.expect(jsonData.pong).to.eql('OK');",
                  "});",
                  "",
                  "pm.test('Plugin Versions', function () {",
                  "    pm.expect(jsonData.plugin_version).to.be.a('string').to.be.eq(pm.environment.get(\"gen_plugin_version\"));",
                  "    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
                  "    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
                  "});",
                  "",
                  "pm.test(\"Check log paths\", function () {",
                  "    const shopNumber = pm.environment.get('shop_number_headless');",
                  "    pm.expect(jsonData.configuration.export_folder_path).to.have.string('shopgate/' + shopNumber);",
                  "    pm.expect(jsonData.configuration.log_folder_path).to.have.string('shopgate/' + shopNumber);",
                  "    pm.expect(jsonData.configuration.cache_folder_path).to.have.string('shopgate/' + shopNumber);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number_headless}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_ping}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: get_customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Check customer data\", function () {",
                  "    if (pm.globals.get('verbose')) {",
                  "        console.log(jsonData);",
                  "    }",
                  "",
                  "    pm.expect(jsonData.user_data.mail).to.eql(pm.environment.get('userEmail'));",
                  "    pm.expect(jsonData.user_data.gender).to.eql('m');",
                  "    pm.expect(jsonData.user_data.first_name).to.eql('Max');",
                  "    pm.expect(jsonData.user_data.last_name).to.eql('Mustermann');",
                  "    pm.expect(jsonData.user_data.customer_number).to.eql('SWDEMO10000');",
                  "    pm.expect(jsonData.user_data.birthday).to.eql('1996-06-06');",
                  "    pm.expect(jsonData.user_data.customer_groups[0]).to.not.be.empty;",
                  "    pm.expect(jsonData.user_data.customer_groups[0]).to.have.ownProperty('id').to.eq(pm.environment.get('gen_customer_group_main_id'));",
                  "    pm.expect(jsonData.user_data.customer_groups[0]).to.have.ownProperty('name').to.eq('Standard customer group');",
                  "    pm.expect(jsonData.user_data.custom_fields).to.be.an('array').to.be.empty;",
                  "});",
                  "",
                  "pm.test(\"Check billing address data\", function () {",
                  "    const billing = jsonData.addresses.find(element => element.is_invoice_address === 1);",
                  "    pm.expect(billing.is_invoice_address).to.eql(1);",
                  "    pm.expect(billing.is_delivery_address).to.eql(1);",
                  "    pm.expect(billing.country).to.eql(pm.environment.get('gen_customer_default_country_iso'));",
                  "    pm.expect(billing.city).to.eql(pm.environment.get('customer_default_city'));",
                  "    pm.expect(billing.zipcode).to.eql(pm.environment.get('customer_default_zip'));",
                  "    pm.expect(billing.state).to.eql(null);",
                  "    pm.expect(billing.first_name).to.eql(pm.environment.get('customer_default_firstName'));",
                  "    pm.expect(billing.last_name).to.eql(pm.environment.get('customer_default_lastName'));",
                  "    pm.expect(billing.company).to.eql(null);",
                  "    pm.expect(billing.street_2).to.eql(null);",
                  "    pm.expect(billing.phone).to.eql(null);",
                  "    pm.expect(billing.gender).to.eql(pm.environment.get('customer_default_gender'));",
                  "    pm.expect(billing.custom_fields).to.be.an('array').to.be.empty;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_get_customer}}",
                  "type": "text"
                },
                {
                  "key": "user",
                  "value": "{{userEmail}}",
                  "type": "text"
                },
                {
                  "key": "pass",
                  "value": "{{userPass}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: log (debug)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Finished Product Export\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "get_log_file",
                  "type": "text"
                },
                {
                  "key": "lines",
                  "value": "25",
                  "type": "text"
                },
                {
                  "key": "log_type",
                  "value": "debug",
                  "description": "access, error, debug, request",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: log (error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Successfull call', function(){",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"authentication failed\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "get_log_file",
                  "type": "text"
                },
                {
                  "key": "lines",
                  "value": "25",
                  "type": "text"
                },
                {
                  "key": "log_type",
                  "value": "error",
                  "description": "access, error, debug, request",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Flysystem",
      "item": [
        {
          "name": "SW: Enable flysystem",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successfully enabled flysystem\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "accept": true
            }
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"409fa1affcf441d59cf023b5ec62f782\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.isFlysystem\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{sw_endpoint_api}}/_action/sync",
              "host": [
                "{{sw_endpoint_api}}"
              ],
              "path": [
                "_action",
                "sync"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SG: get all products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Not an error\", function () {",
                  "    pm.response.to.not.have.jsonBody('error');",
                  "});",
                  "",
                  "const jsonObject = xml2Json(responseBody);",
                  "pm.test(\"Flysystem export check\", function () {",
                  "    pm.expect(jsonObject.items.item, 'Should have items with Flysystem enabled').to.be.a('array').to.be.not.empty;",
                  "});",
                  "",
                  "pm.test(\"Header check\", function () {",
                  "    pm.response.to.be.header(\"Content-Type\", 'application/xml');",
                  "    pm.response.to.have.header('Content-Length');",
                  "    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"shopgate_items.xml\"');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "X-Shopgate-Auth-User",
                "value": "{{gen_sg_header_auth_user}}"
              },
              {
                "key": "X-Shopgate-Auth-Token",
                "value": "{{gen_sg_header_auth_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shop_number",
                  "value": "{{shop_number}}",
                  "type": "text"
                },
                {
                  "key": "action",
                  "value": "{{framework_action_get_items}}",
                  "type": "text"
                },
                {
                  "key": "limit",
                  "value": "100",
                  "description": "\n",
                  "type": "text"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{domain}}",
              "host": [
                "{{domain}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SW: Disable flysystem",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successfully disabled flysystem\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "accept": true
            }
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"409fa1affcf441d59cf023b5ec62f782\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.isFlysystem\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{sw_endpoint_api}}/_action/sync",
              "host": [
                "{{sw_endpoint_api}}"
              ],
              "path": [
                "_action",
                "sync"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "/**",
          " *  SG Token generation",
          " */",
          "var tstamp = Math.floor(Date.now() / 1000);",
          "",
          "// Use the CryptoJS",
          "var authUser = pm.environment.get('customer_number') + \"-\" + tstamp;",
          "var tokenData = \"SPA-\" + pm.environment.get('customer_number') + \"-\" + tstamp + \"-\" + pm.environment.get('api_key');",
          "",
          "var authToken = CryptoJS.SHA1(tokenData).toString();",
          "",
          "// Set the new header values",
          "pm.environment.set(\"gen_sg_header_auth_user\", authUser);",
          "pm.environment.set(\"gen_sg_header_auth_token\", authToken);",
          "",
          "",
          "/**",
          " * SW Token generation",
          " */",
          "var getToken = true;",
          "if (!pm.environment.get('gen_token_expires') || !pm.environment.get('gen_access_token')) {",
          "    console.log('Token or expiry date are missing');",
          "} else if (pm.environment.get('gen_token_expires') <= (new Date()).getTime()) {",
          "    console.log('Token is expired');",
          "} else {",
          "    getToken = false;",
          "}",
          "",
          "if (getToken === true) {",
          "    const createRequest = {",
          "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
          "        \"grant_type\": \"password\",",
          "        \"scopes\": \"write\",",
          "        \"username\": pm.environment.get(\"sw_admin\"),",
          "        \"password\": pm.environment.get(\"sw_pass\")",
          "    };",
          "    const refreshRequest = {",
          "        \"grant_type\": \"refresh_token\",",
          "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
          "        \"refresh_token\": pm.environment.get(\"gen_refresh_token\")",
          "    };",
          "    // SW Auth",
          "    const authRequest = {",
          "        url: pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_auth\"))),",
          "        method: 'POST',",
          "        header: 'Accept: application/json\\nContent-Type: application/json; charset=utf-8',",
          "        body: {",
          "            mode: 'application/json'",
          "        }",
          "    };",
          "    // set body depending on type of request needed",
          "    authRequest.body.raw = JSON.stringify(pm.environment.get(\"gen_refresh_token\") ? refreshRequest : createRequest);",
          "    pm.sendRequest(authRequest, function (err, res) {",
          "        if (pm.globals.get('verbose')){",
          "            console.log(err ? err : res.json());",
          "        }",
          "        ",
          "        if (err === null) {",
          "            console.log('Saving the token and expiry date')",
          "            var responseJson = res.json();",
          "            pm.environment.set('gen_access_token', responseJson.access_token)",
          "           ",
          "            var expiryDate = new Date();",
          "            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
          "            pm.environment.set('gen_token_expires', expiryDate.getTime());",
          "            pm.environment.set('gen_refresh_token', responseJson.refresh_token);",
          "        }",
          "    });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}
