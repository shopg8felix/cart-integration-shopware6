stages:
  - build
  - test
  - deploy

variables:
  PROJECT_ROOT: ${CI_PROJECT_DIR}
  WEB_DOCUMENT_ROOT: $CI_PROJECT_DIR/public
  LOG_STDOUT: $CI_PROJECT_DIR/var/log/stdout.log
  MYSQL_DATABASE: root
  MYSQL_ROOT_PASSWORD: root
  GIT_STRATEGY: clone
  # things plugins might want to override
  DEV_IMAGE: shopware/development:7.4-composer-2
  MYSQL_IMAGE: mysql:5.7
  MYSQL_CMD: mysqld
  MYSQL8_CMD: 'mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --sql-require-primary-key=ON'
  PLATFORM_BRANCH: '6.4.6.0'
  PLUGIN_NAME: 'SgateShopgatePluginSW6'
  PLUGIN_SOURCE_DIR: src/
  PLUGIN_COMPOSER_SDK_NAME: 'shopgate/cart-integration-sdk'
  PLUGIN_CONFIG_APIKEY: '111111111111111111111111'
  PLUGIN_CONFIG_SHOPNUMBER: '123456'
  PLUGIN_CONFIG_HEADLESS_SHOPNUMBER: '1234567'
  PLUGIN_CONFIG_CUSTOMERNUMBER: '12345'
  SW_ADMIN_USER: myadmin
  SW_ADMIN_PASS: test.123
  VERBOSE: ''

# Cache libraries in between PR commits
cache:
  key: $CI_MERGE_REQUEST_IID
  paths:
    - vendor/

workflow:
  rules:
    # do not run on push
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG == null'
      when: never
    - when: always

default:
  image: $DEV_IMAGE
  services:
    - name: $MYSQL_IMAGE
      alias: database
      entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
  before_script:
    - export APP_URL="http://$HOSTNAME"
    - apt update > /dev/null
    - apt-get install -y jq > /dev/null
    - PLUGIN_COMPOSER_NAME=$(jq -r ".name" composer.json)
    - PLUGIN_COMPOSER_VERSION=$(jq -r ".version" composer.json)
    - PLUGIN_COMPOSER_SDK_VERSION=$(cat composer.json | jq --raw-output --arg sdk "$PLUGIN_COMPOSER_SDK_NAME" '.require[$sdk]')
    - >
      [ -d vendor ] && mv vendor /tmp/
    - zip -rq plugin.zip .
    - mv plugin.zip /tmp/plugin.zip
    - rm -Rf .* * || true
    - git clone https://github.com/shopware/platform.git . --branch $PLATFORM_BRANCH
    - >
      [ -d /tmp/vendor ] && mv /tmp/vendor ./
    - mkdir -p custom/plugins || true
    - unzip -q /tmp/plugin.zip -d custom/plugins/$PLUGIN_NAME
    - composer require "$PLUGIN_COMPOSER_SDK_NAME":"$PLUGIN_COMPOSER_SDK_VERSION" --no-update
    - composer install --quiet
    - mkdir -p config/jwt || true
    - bin/console system:generate-jwt || true
    - bin/console system:install --drop-database --basic-setup --force --quiet
    - bin/console user:create --admin --email=test-user@apite.io --password=$SW_ADMIN_PASS $SW_ADMIN_USER
    - chown -R 1000:1000 .
    - bin/console plugin:refresh --quiet
    - bin/console plugin:install --activate $PLUGIN_NAME
    - >
      if bin/console debug:container --parameter kernel.plugin_infos --format json | grep -q "$PLUGIN_NAME";
        then echo "$PLUGIN_NAME is active";
        else echo "$PLUGIN_NAME is not active"; exit 1;
      fi
    - bin/console bundle:dump
    - bin/console assets:install --quiet
    - /entrypoint supervisord > /dev/null 2>&1 &

newman:
  stage: test
  rules:
    - if: '$CI_COMMIT_TAG == null'
  script:
    - npm install -g newman@^5.3.0 newman-reporter-htmlextra > /dev/null
    - APP_ENV=prod php bin/console store:download -p SwagPlatformDemoData
    - bin/console plugin:install --activate SwagPlatformDemoData
    - export SalesChannel=$(mysql -h database -u root -proot root -BNe "SELECT lower(HEX(sales_channel_id)) FROM sales_channel_domain WHERE url='$APP_URL';");
    - export HeadlessSalesChannel=$(mysql -h database -u root -proot root -BNe "SELECT lower(HEX(sales_channel_id)) FROM sales_channel_domain WHERE url='default.headless0';");
    - >
      mysql -h database -u root -proot root -e "INSERT INTO system_config (id, configuration_key, configuration_value, sales_channel_id, created_at) VALUES (UNHEX(REPLACE(UUID(),'-','')),'SgateShopgatePluginSW6.config.isActive', '{\"_value\": true}', null, NOW());";
    - bin/console system:config:set -s $SalesChannel SgateShopgatePluginSW6.config.shopNumber $PLUGIN_CONFIG_SHOPNUMBER;
    - bin/console system:config:set -s $HeadlessSalesChannel SgateShopgatePluginSW6.config.shopNumber $PLUGIN_CONFIG_HEADLESS_SHOPNUMBER;
    - bin/console system:config:set SgateShopgatePluginSW6.config.customerNumber $PLUGIN_CONFIG_CUSTOMERNUMBER;
    - bin/console system:config:set SgateShopgatePluginSW6.config.apiKey $PLUGIN_CONFIG_APIKEY;
    - |-
      if [[ $VERBOSE != "" ]]; then
          mysql -h database -u root -proot root -e "SELECT configuration_key, configuration_value, lower(HEX(sales_channel_id)) FROM system_config WHERE configuration_key LIKE '%Shopgate%';";
      fi
    - cd ${PROJECT_ROOT}/custom/plugins/$PLUGIN_NAME/tests/Postman;
    - newman run ./collection.json -g ./globals.json -e ./environment.json -r cli,htmlextra --reporter-htmlextra-export ${PROJECT_ROOT}/postman-report.html --color on --insecure --no-insecure-file-read
      --env-var "plugin_version=$PLUGIN_COMPOSER_VERSION" --env-var "sw_admin=$SW_ADMIN_USER" --env-var "sw_pass=$SW_ADMIN_PASS" --env-var "host=$APP_URL"
      --env-var "shop_number=$PLUGIN_CONFIG_SHOPNUMBER" --env-var "customer_number=$PLUGIN_CONFIG_CUSTOMERNUMBER" --env-var "api_key=$PLUGIN_CONFIG_APIKEY" ${NEWMAN_VERBOSE}
      --env-var "shop_number_headless=$PLUGIN_CONFIG_HEADLESS_SHOPNUMBER" --global-var "verbose=$VERBOSE";
  artifacts:
    when: on_failure
    expire_in: 30 days
    paths:
      - ./postman-report.html

phpunit:
  stage: test
  needs: [ ]
  rules:
    - exists:
        - phpunit.xml*
      if: '$CI_COMMIT_TAG == null'
  before_script:
    - composer require phpunit/phpunit:~9.5.2 --dev
  script:
    - php
      -d pcov.enabled=1 -d pcov.directory=$PWD/src -d pcov.exclude='~(vendor|tests|node_modules)~'
      vendor/bin/phpunit
      --configuration phpunit.xml.dist
      --log-junit ${CI_PROJECT_DIR}/phpunit.junit.xml
      --colors=never
      --coverage-cobertura ${CI_PROJECT_DIR}/cobertura.xml
      --coverage-text | sed -E -n '1,/^\s*Lines:\s*([0-9]+(\.[0-9]+)?)%/ p' # do not output covered files lines
  coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
  artifacts:
    when: always
    reports:
      junit: phpunit.junit.xml
      cobertura: cobertura.xml

build zip:
  stage: build
  only:
    - tags
  script:
    - composer require frosh/plugin-uploader:0.3.19
    - cd $CI_PROJECT_DIR/custom/plugins
    - cp $PLUGIN_NAME/devops/rewrites/DescriptionLengthChecker.php $PROJECT_ROOT/vendor/frosh/plugin-uploader/src/Components/PluginValidator/General/
    - zip -q -r $PLUGIN_NAME.zip $PLUGIN_NAME -x $PLUGIN_NAME/.\* -x $PLUGIN_NAME/tests/\* -x $PLUGIN_NAME/devops/\*
    - '[[ -r $PLUGIN_NAME.zip ]] || (echo "failed to create $PLUGIN_NAME.zip. Please run ./bin/init $PLUGIN_NAME" && exit 1)'
    - mv $PLUGIN_NAME.zip ${CI_PROJECT_DIR}/$PLUGIN_NAME.zip
  artifacts:
    name: '${PLUGIN_NAME}.zip'
    paths:
      - '*.zip'

validate zip:
  stage: test
  variables:
    GIT_STRATEGY: none
  needs:
    - build zip
  only:
    - tags
  before_script: [ ]
  script:
    - $PROJECT_ROOT/vendor/bin/pluginupload ext:validate $PWD/$PLUGIN_NAME.zip

upload zip to store:
  stage: deploy
  environment:
    name: account.shopware.com
    url: 'https://account.shopware.com'
  image:
    name: ghcr.io/friendsofshopware/platform-plugin-dev:v6.4.4
    entrypoint: [ "" ]
  services: [ ]
  variables:
    GIT_STRATEGY: none
  needs:
    - build zip
  only:
    - tags
  before_script: [ ]
  script:
    - echo "finished"
#    - plugin-uploader ext:upload "$(realpath "$PLUGIN_NAME.zip")"
