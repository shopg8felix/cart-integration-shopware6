<?php

namespace Shopgate\Shopware\Export\Catalog\Mapping;

use Shopgate\Shopware\Exceptions\MissingContextException;
use Shopgate\Shopware\Storefront\ContextManager;
use Shopgate_Model_Catalog_CategoryPath;
use Shopgate_Model_Catalog_Product;
use Shopgate_Model_Media_Image;
use Shopware\Core\Content\Product\ProductEntity;
use Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainEntity;

class ProductMapping extends Shopgate_Model_Catalog_Product
{
    /** @var ProductEntity */
    protected $item;
    /** @var ContextManager */
    private $contextManager;

    public function __construct(ContextManager $contextManager)
    {
        $this->contextManager = $contextManager;
        parent::__construct();
    }

    public function setUid(): void
    {
        parent::setUid($this->item->getId());
    }

    public function setName(): void
    {
        parent::setName($this->item->getName());
    }

    public function setTaxClass(): void
    {
        parent::setTaxClass($this->item->getTaxId()); //todo: could be name
    }

    /**
     * @throws MissingContextException
     */
    public function setCurrency(): void
    {
        if ($currency = $this->contextManager->getSalesContext()->getSalesChannel()->getCurrency()) {
            parent::setCurrency($currency->getIsoCode());
        }
    }

    public function setDescription(): void
    {
        parent::setDescription($this->item->getDescription());
    }

    /**
     * @throws MissingContextException
     */
    public function setDeeplink(): void
    {
        parent::setDeeplink($this->getDeepLinkUrl($this->item));
    }

    /**
     * @param ProductEntity $productEntity
     * @return string
     * @throws MissingContextException
     */
    private function getDeepLinkUrl(ProductEntity $productEntity): string
    {
        $channel = $this->contextManager->getSalesContext()->getSalesChannel();
        $entityList = $productEntity->getSeoUrls()
            ? $productEntity->getSeoUrls()->filterBySalesChannelId($channel->getId())
            : null;
        if ($entityList && $entity = $entityList->first()) {
            // intentional use of get, URL can be null which throws Shopware exception
            if ($entity->get('url')) {
                return $entity->getUrl();
            }
            if (null !== $channel->getDomains()) {
                $domainCollection = $channel->getDomains()->filterByProperty('salesChannelId', $channel->getId());
                /** @var null|SalesChannelDomainEntity $domain */
                $domain = $domainCollection->first();
                return $domain ? $domain->getUrl() . $entity->getPathInfo() : '';
            }
        }

        return '';
    }

    public function setWeight(): void
    {
        parent::setWeight($this->item->getWeight());
    }

    public function setPrice(): void
    {
        $price = $this->getPrice();
        parent::setPrice($price); // TODO: Change the autogenerated stub
    }

    public function setImages(): void
    {
        if (!$this->item->getMedia()) {
            return;
        }
        $images = [];
        foreach ($this->item->getMedia()->getMedia() as $key => $media) {
            $image = new Shopgate_Model_Media_Image();
            $image->setUid($media->getId());
            $image->setAlt($media->getAlt());
            $image->setTitle($media->getTitle());
            $image->setUrl($media->getUrl());
            $image->setSortOrder($key);
            $image->setIsCover($this->item->getCover() && $this->item->getCoverId() === $media->getId());
            $images[] = $image;
            //todo: finish up, sort order test
        }
        parent::setImages($images);
    }

    public function setCategoryPaths(): void
    {
        $path = new Shopgate_Model_Catalog_CategoryPath();
        //$categories = $this->item->getCategories();
        parent::setCategoryPaths([$path]); // TODO: Change the autogenerated stub
    }
}
